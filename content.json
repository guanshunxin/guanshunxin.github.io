{"meta":{"title":"guan","subtitle":"GUANの博客","description":"博客因兴趣诞生,在不断完善中","author":"guanshunxin","url":"https://www.guanshunxin.com","root":"/"},"pages":[{"title":"关于本站","date":"2021-12-03T07:58:56.000Z","updated":"2021-12-04T07:59:17.509Z","comments":false,"path":"about/index.html","permalink":"https://www.guanshunxin.com/about/index.html","excerpt":"","text":"GuanのCSFTS“ 认识自我、超越自我 “ 那么你离成功就又进了一步！ 当你在项目中感觉所要学习的人和事越来越多时，说明你在 成长 。 当你感觉要责怪的人和事越来越少时，说明你在 成熟 。 当你在项目中不断获得了友谊和朋友时，说明你将取得项目的 成功 。 联系我B站：侧耳听风-_- QQ：2984044599 （嘀嘀~，麻烦让一下，我要开车了！） 座右铭：既然选择了远方 便只顾风雨兼程"},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2021-06-27T12:40:24.587Z","comments":true,"path":"archives/index.html","permalink":"https://www.guanshunxin.com/archives/index.html","excerpt":"","text":""},{"title":"留言板","date":"2020-10-31T02:11:28.000Z","updated":"2021-11-23T10:50:01.880Z","comments":false,"path":"comments/index.html","permalink":"https://www.guanshunxin.com/comments/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-06-07T14:17:49.000Z","updated":"2021-07-27T07:31:10.990Z","comments":true,"path":"link/index.html","permalink":"https://www.guanshunxin.com/link/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-11-24T07:14:39.000Z","updated":"2021-07-26T14:44:42.337Z","comments":false,"path":"tags/index.html","permalink":"https://www.guanshunxin.com/tags/index.html","excerpt":"","text":""},{"title":"我的歌单","date":"2019-05-17T08:14:00.000Z","updated":"2021-07-26T13:06:52.537Z","comments":true,"path":"music/index.html","permalink":"https://www.guanshunxin.com/music/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-11-24T07:12:19.000Z","updated":"2021-07-26T14:44:28.785Z","comments":false,"path":"categories/index.html","permalink":"https://www.guanshunxin.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2021-12-03T08:41:10.000Z","updated":"2021-12-04T07:01:16.747Z","comments":false,"path":"List/movies/index.html","permalink":"https://www.guanshunxin.com/List/movies/index.html","excerpt":"","text":""},{"title":"相册","date":"2022-04-15T02:54:45.105Z","updated":"2022-04-15T02:54:45.105Z","comments":false,"path":"List/gallery/index.html","permalink":"https://www.guanshunxin.com/List/gallery/index.html","excerpt":"","text":"壁紙 世俗的欲望 My Wife 动漫壁纸收集"},{"title":"纯音乐","date":"2020-04-23T04:58:56.000Z","updated":"2021-12-04T07:38:35.424Z","comments":false,"path":"List/music/index.html","permalink":"https://www.guanshunxin.com/List/music/index.html","excerpt":"","text":""},{"title":"","date":"2021-09-28T14:56:14.000Z","updated":"2022-05-18T05:50:37.784Z","comments":false,"path":"List/gallery/ohmygirl/index.html","permalink":"https://www.guanshunxin.com/List/gallery/ohmygirl/index.html","excerpt":"","text":""},{"title":"","date":"2021-09-28T14:56:13.000Z","updated":"2022-04-16T12:54:35.121Z","comments":false,"path":"List/gallery/wallpaper/index.html","permalink":"https://www.guanshunxin.com/List/gallery/wallpaper/index.html","excerpt":"","text":""}],"posts":[{"title":"STL","slug":"15-STL","date":"2022-07-03T13:54:20.000Z","updated":"2022-07-03T13:54:34.896Z","comments":true,"path":"posts/15.html","link":"","permalink":"https://www.guanshunxin.com/posts/15.html","excerpt":"","text":"函数模板#include &lt;iostream&gt; using namespace std; //声明一个模板，告诉编译器后面的代码中紧跟的T不要报错， //T是一个通用数据类型 template&lt;typename T&gt; //typename函数模板；class类模板 //class可替换typename void mySwap(T &amp;a,T &amp;b) { T temp=a; a=b; b=temp; } //模板必须要确定T的数据类型才可以使用 template&lt;class T&gt; void func() { cout&lt;&lt;\"func调用！\"&lt;&lt;endl; } void test() { //func();错误 func&lt;int&gt;(); } template&lt;class T&gt; void mySort(T arr[],int len) { //排序 } void test1() { char charArr[]=\"shcbws\"; int num=sizeof(charArr)/sizeof(char); mySort(charArr,num); } int main() { int a=10; int b=20; //使用函数模板交换 //自动类型推导,类型一致 //mySwap(a,b); //显示指定类型int mySwap&lt;int&gt;(a,b); cout&lt;&lt;\"a: \"&lt;&lt;a&lt;&lt;endl; cout&lt;&lt;\"b: \"&lt;&lt;b&lt;&lt;endl; return 0; } 类模板#include &lt;iostream&gt; using namespace std; template&lt;class NameType,class AgeType&gt; class Person { public: Person(NameType name,AgeType age) { this-&gt;m_Name=name; this-&gt;m_Age=age; } void showPerson() { cout&lt;&lt;\"name: \"&lt;&lt;this-&gt;m_Name&lt;&lt;\" age：\"&lt;&lt;this-&gt;m_Age&lt;&lt;endl; } NameType m_Name; AgeType m_Age; }; void test() { Person&lt;string,int&gt; p(\"管大爷\",999); p.showPerson(); } int main() { return 0; } 初始STL#include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;algorithm&gt; using namespace std; void myPrint(int a) { cout&lt;&lt;a&lt;&lt;endl; } void test() { vector&lt;int&gt; v; v.push_back(10); v.push_back(20); v.push_back(30); v.push_back(40); //起始迭代器，指向容器中的第一个元素 vector&lt;int&gt;::iterator itBegin=v.begin(); //结束迭代器，指向容器中最后一个元素后一个位置 vector&lt;int&gt;::iterator itEnd=v.end(); //第一种遍历方式 while(itBegin!=itEnd) { cout&lt;&lt;*itBegin&lt;&lt;endl; itBegin++; } //第二种遍历方式 for(vector&lt;int&gt;::iterator it=v.begin();it!=v.end();it++) { cout&lt;&lt;*it&lt;&lt;endl; } //第三种遍历方式 for_each(v.begin(),v.end(),myPrint); } int main() { test(); return 0; } String构造函数和赋值#include &lt;iostream&gt; using namespace std; void test() { string s1; char *str=\"hello world\"; string s2(str); cout&lt;&lt;\"s2：\"&lt;&lt;s2&lt;&lt;endl; string s3(s2); cout&lt;&lt;\"s3：\"&lt;&lt;s3&lt;&lt;endl; string s4(10,'a'); cout&lt;&lt;\"s3：\"&lt;&lt;s3&lt;&lt;endl; //string赋值 string s5; s5.assign(\"hello C++\",5); cout&lt;&lt;\"s5：\"&lt;&lt;s5&lt;&lt;endl; string s6; s6.assign(10,'w'); cout&lt;&lt;\"s6：\"&lt;&lt;s6&lt;&lt;endl; } int main() { test(); return 0; } 字符串拼接#include &lt;iostream&gt; using namespace std; void test() { string s1=\"管\"; s1+=\"大爷\"; cout&lt;&lt;\"s1：\"&lt;&lt;s1&lt;&lt;endl; string s2=\"I\"; s2.append(\" love \"); cout&lt;&lt;\"s2：\"&lt;&lt;s2&lt;&lt;endl; s2.append(\"Hello\",1); cout&lt;&lt;\"s2：\"&lt;&lt;s2&lt;&lt;endl; s2.append(s1,0,2);//汉字要两个，字母一个 cout&lt;&lt;\"s2：\"&lt;&lt;s2&lt;&lt;endl; } int main() { test(); return 0; } 字符串查找和替换#include &lt;iostream&gt; using namespace std; void test() { string s1=\"asfqewfqg\"; //从左往右查 int pos=s1.find(\"fq\"); cout&lt;&lt;\"pos= \"&lt;&lt;pos&lt;&lt;endl; //从右往左查 int pos1=s1.rfind(\"fq\"); cout&lt;&lt;\"pos1= \"&lt;&lt;pos1&lt;&lt;endl; } //替换 void test1() { string s2=\"abcdefgh\"; s2.replace(1,3,\"1111\"); cout&lt;&lt;\"s2= \"&lt;&lt;s2&lt;&lt;endl; } int main() { test(); test1(); return 0; } 字符串比较#include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;algorithm&gt; using namespace std; void myPrint(int a) { cout&lt;&lt;a&lt;&lt;endl; } void test() { vector&lt;int&gt; v; v.push_back(10); v.push_back(20); v.push_back(30); v.push_back(40); //起始迭代器，指向容器中的第一个元素 vector&lt;int&gt;::iterator itBegin=v.begin(); //结束迭代器，指向容器中最后一个元素后一个位置 vector&lt;int&gt;::iterator itEnd=v.end(); //第一种遍历方式 while(itBegin!=itEnd) { cout&lt;&lt;*itBegin&lt;&lt;endl; itBegin++; } //第二种遍历方式 for(vector&lt;int&gt;::iterator it=v.begin();it!=v.end();it++) { cout&lt;&lt;*it&lt;&lt;endl; } //第三种遍历方式 for_each(v.begin(),v.end(),myPrint); } int main() { test(); return 0; } 字符串存取#include &lt;iostream&gt; using namespace std; void test() { string s1=\"hello\"; for(int i=0;i&lt;s1.size();i++) { cout&lt;&lt;s1[i]&lt;&lt;\" \"; } cout&lt;&lt;endl; for(int i=0;i&lt;s1.size();i++) { cout&lt;&lt;s1.at(i)&lt;&lt;\" \"; } cout&lt;&lt;endl; //修改单个字符 s1[0]='g'; cout&lt;&lt;\"s1: \"&lt;&lt;s1&lt;&lt;endl; s1.at(1)='g'; cout&lt;&lt;\"s1: \"&lt;&lt;s1&lt;&lt;endl; } int main() { test(); return 0; } 字符串插入和删除#include &lt;iostream&gt; using namespace std; int main() { //从哪个位置插入什么或删除几个 string s1=\"hello\"; //插入 s1.insert(1,\"ggg\"); cout&lt;&lt;s1&lt;&lt;endl; //删除 s1.erase(1,3); cout&lt;&lt;s1&lt;&lt;endl; return 0; } 子串获取#include &lt;iostream&gt; using namespace std; int main() { string s1=\"abccdef\"; string s2=s1.substr(1,3); cout&lt;&lt;s2&lt;&lt;endl;//bcc //获取用户名信息 string s3=\"hello@qq.com\"; int pos=s3.find('@'); string user=s3.substr(0,pos); cout&lt;&lt;user&lt;&lt;endl; return 0; } vector构造函数#include &lt;iostream&gt; #include&lt;vector&gt; using namespace std; void printVetor(vector&lt;int&gt;&amp;v) { for(vector&lt;int&gt;::iterator it=v.begin();it!=v.end();it++) { cout&lt;&lt;*it&lt;&lt;\" \"; } cout&lt;&lt;endl; } void test() { vector&lt;int&gt;v1; for(int i=0;i&lt;10;i++) { if(i&lt;5) v1.push_back(i); else v1.push_back(5); } printVetor(v1); //通过区间方式进行构造 vector&lt;int&gt;v2(v1.begin(),v1.end()); printVetor(v2); //n个elem方式构造 vector&lt;int&gt;v3(3,100); printVetor(v3); //copy构造 vector&lt;int&gt;v4(v3); printVetor(v4); } int main() { test(); return 0; } 赋值操作#include &lt;iostream&gt; #include&lt;vector&gt; using namespace std; void printVector(vector&lt;int&gt; &amp;v) { for(vector&lt;int&gt;::iterator it=v.begin();it!=v.end();it++) { cout&lt;&lt;*it&lt;&lt;\" \"; } cout&lt;&lt;endl; } void test() { vector&lt;int&gt;v1; for(int i=0;i&lt;10;i++) { v1.push_back(i); } printVector(v1); //赋值 vector&lt;int&gt;v2=v1; printVector(v2); //assign vector&lt;int&gt;v3; v3.assign(v1.begin(),v1.end()); printVector(v3); //n个elem方式赋值 vector&lt;int&gt;v4; v4.assign(10,100); printVector(v4); } int main() { test(); return 0; } 容量和大小#include &lt;iostream&gt; #include&lt;vector&gt; using namespace std; void printVector(vector&lt;int&gt;&amp;v) { for(vector&lt;int&gt;::iterator it=v.begin();it!=v.end();it++) { cout&lt;&lt;*it&lt;&lt;\" \"; } cout&lt;&lt;endl; } void test() { vector&lt;int&gt;v1; for(int i=0;i&lt;10;i++) { v1.push_back(i); } printVector(v1); if(v1.empty()) { cout&lt;&lt;\"v1为空\"&lt;&lt;endl; } else { cout&lt;&lt;\"v1不为空\"&lt;&lt;endl; cout&lt;&lt;\"v1的容量为：\"&lt;&lt;v1.capacity()&lt;&lt;endl; cout&lt;&lt;\"v1的大小为：\"&lt;&lt;v1.size()&lt;&lt;endl; } //重新指定大小 v1.resize(15); printVector(v1); v1.resize(10); v1.resize(15,100);//利用重载版本，可以指定默认填充值 printVector(v1); } int main() { test(); return 0; } 插入和删除#include &lt;iostream&gt; #include&lt;vector&gt; using namespace std; void printVector(vector&lt;int&gt; &amp;v) { for(vector&lt;int&gt;::iterator it=v.begin();it!=v.end();it++) { cout&lt;&lt;*it&lt;&lt;\" \"; } cout&lt;&lt;endl; } void test() { vector&lt;int&gt;v1; v1.push_back(10); v1.push_back(20); v1.push_back(30); v1.push_back(40); printVector(v1); //尾删 v1.pop_back(); printVector(v1); //插入 v1.insert(v1.begin(),100); printVector(v1); v1.insert(v1.begin(),2,99); printVector(v1); //删除 v1.erase(v1.begin()); printVector(v1); //清空 v1.erase(v1.begin(),v1.end()); printVector(v1); v1.clear(); printVector(v1); } int main() { test(); return 0; } 数据存取#include &lt;iostream&gt; #include&lt;vector&gt; using namespace std; void test() { vector&lt;int&gt;v1; for(int i=0;i&lt;10;i++) { v1.push_back(i); } //用[]访问数组中元素 for(int i=0;i&lt;v1.size();i++) { cout&lt;&lt;v1[i]&lt;&lt;\" \"; } cout&lt;&lt;endl; //用at访问元素 for(int i=0;i&lt;v1.size();i++) { cout&lt;&lt;v1.at(i)&lt;&lt;\" \"; } cout&lt;&lt;endl; //获取第一个元素 cout&lt;&lt;\"第一个元素是：\"&lt;&lt;v1.front()&lt;&lt;endl; //获取最后一个元素 cout&lt;&lt;\"最后一个元素是：\"&lt;&lt;v1.back()&lt;&lt;endl; } int main() { test(); return 0; } 互换容器#include &lt;iostream&gt; #include&lt;vector&gt; using namespace std; void printVetor(vector&lt;int&gt;&amp;v) { for(vector&lt;int&gt;::iterator it=v.begin();it!=v.end();it++) { cout&lt;&lt;*it&lt;&lt;\" \"; } cout&lt;&lt;endl; } void test() { vector&lt;int&gt;v1; for(int i=0;i&lt;10;i++) { v1.push_back(i); } cout&lt;&lt;\"交换前：\"&lt;&lt;endl; printVetor(v1); vector&lt;int&gt;v2; for(int i=10;i&gt;0;i--) { v2.push_back(i); } printVetor(v2); cout&lt;&lt;\"交换后：\"&lt;&lt;endl; v1.swap(v2); printVetor(v1); printVetor(v2); } //2、实际用途 //巧用swap可以收缩空间 void test1() { vector&lt;int&gt;v3; for(int i=0;i&lt;100000;i++) { v3.push_back(i); } cout&lt;&lt;\"v3的容量是：\"&lt;&lt;v3.capacity()&lt;&lt;endl; cout&lt;&lt;\"v3的大小是：\"&lt;&lt;v3.size()&lt;&lt;endl; //重新指定大小 v3.resize(3); cout&lt;&lt;\"v3的容量是：\"&lt;&lt;v3.capacity()&lt;&lt;endl; cout&lt;&lt;\"v3的大小是：\"&lt;&lt;v3.size()&lt;&lt;endl; //巧用swap收缩内存 cout&lt;&lt;\"巧用swap收缩内存\"&lt;&lt;endl; vector&lt;int&gt;(v3).swap(v3); cout&lt;&lt;\"v3的容量是：\"&lt;&lt;v3.capacity()&lt;&lt;endl; cout&lt;&lt;\"v3的大小是：\"&lt;&lt;v3.size()&lt;&lt;endl; } int main() { test(); test1(); return 0; } 预留空间#include &lt;iostream&gt; #include&lt;vector&gt; using namespace std; void test() { vector&lt;int&gt;v; int num=0; int *p=NULL; for(int i=0;i&lt;100000;i++) { v.push_back(i); if(p!=&amp;v[0]) { //重新开辟时首地址会改变 p=&amp;v[0]; num++; } } cout&lt;&lt;\"动态扩展了：\"&lt;&lt;num&lt;&lt;\" 次\"&lt;&lt;endl; } void test1() { vector&lt;int&gt;v; //预留空间 v.reserve(100000); int num=0; int *p=NULL; for(int i=0;i&lt;100000;i++) { v.push_back(i); if(p!=&amp;v[0]) { //重新开辟时首地址会改变 p=&amp;v[0]; num++; } } cout&lt;&lt;\"预留空间后动态扩展了：\"&lt;&lt;num&lt;&lt;\" 次\"&lt;&lt;endl; } int main() { test(); test1(); return 0; } deque构造函数 #include &lt;iostream&gt; #include&lt;deque&gt; using namespace std; void printDeque(deque&lt;int&gt;&amp;d) { for(deque&lt;int&gt;::iterator it=d.begin();it!=d.end();it++) { cout&lt;&lt;*it&lt;&lt;\" \"; } cout&lt;&lt;endl; } void test() { deque&lt;int&gt;d; for(int i=0;i&lt;10;i++) { d.push_back(i); } printDeque(d); deque&lt;int&gt;d1(d.begin(),d.end()); printDeque(d1); deque&lt;int&gt;d2(10,100); printDeque(d2); deque&lt;int&gt;d3(d2); printDeque(d3); } int main() { test(); return 0; } 赋值操作#include &lt;iostream&gt; #include&lt;deque&gt; using namespace std; void printDeque(const deque&lt;int&gt;&amp;d) { for(deque&lt;int&gt;::const_iterator it=d.begin();it!=d.end();it++) { cout&lt;&lt;*it&lt;&lt;\" \"; } cout&lt;&lt;endl; } void test() { deque&lt;int&gt;d1; for(int i=0;i&lt;10;i++) { d1.push_back(i); } printDeque(d1); //=赋值 deque&lt;int&gt;d2; d2=d1; printDeque(d2); //assign赋值 deque&lt;int&gt;d3; d3.assign(d1.begin(),d1.end()); printDeque(d3); deque&lt;int&gt;d4; d4.assign(10,100); printDeque(d4); } int main() { test(); return 0; } 大小操作#include &lt;iostream&gt; #include&lt;deque&gt; using namespace std; void printDeque(const deque&lt;int&gt;&amp;d) { for(deque&lt;int&gt;::const_iterator it=d.begin();it!=d.end();it++) { cout&lt;&lt;*it&lt;&lt;\" \"; } cout&lt;&lt;endl; } void test() { deque&lt;int&gt;d1; for(int i=0;i&lt;10;i++) { d1.push_back(i); } printDeque(d1); if(d1.empty()) { cout&lt;&lt;\"为空\"&lt;&lt;endl; } else { cout&lt;&lt;\"不为空\"&lt;&lt;endl; cout&lt;&lt;\"d1大小：\"&lt;&lt;d1.size()&lt;&lt;endl; } d1.resize(15,1); printDeque(d1); d1.resize(3); printDeque(d1); } int main() { test(); return 0; } 插入和删除#include &lt;iostream&gt; #include&lt;deque&gt; using namespace std; void printDeque(const deque&lt;int&gt;&amp;d) { for(deque&lt;int&gt;::const_iterator it=d.begin();it!=d.end();it++) { cout&lt;&lt;*it&lt;&lt;\" \"; } cout&lt;&lt;endl; } void test() { deque&lt;int&gt;d1; //尾插 d1.push_back(10); d1.push_back(20); d1.push_back(30); d1.push_back(40); //头插 d1.push_front(100); printDeque(d1); //尾删 d1.pop_back(); printDeque(d1); //头删 d1.pop_front(); printDeque(d1); //insert插入 d1.insert(d1.begin(),1,1000); printDeque(d1); //按照区间插入 d1.insert(d1.begin(),d1.begin(),d1.end()); printDeque(d1); //删除 deque&lt;int&gt;::iterator it=d1.begin(); it++; d1.erase(it); printDeque(d1); //按区间删除 d1.erase(d1.begin(),d1.end());//清空 printDeque(d1); //清空 d1.clear(); printDeque(d1); } int main() { test(); return 0; } 数据存取#include &lt;iostream&gt; #include&lt;deque&gt; using namespace std; void test() { deque&lt;int&gt;d1; //尾插 d1.push_back(10); d1.push_back(20); d1.push_back(30); d1.push_back(40); //头插 d1.push_front(100); //通过[]访问元素 for(int i=0;i&lt;d1.size();i++) { cout&lt;&lt;d1[i]&lt;&lt;\" \"; } cout&lt;&lt;endl; //通过at访问 for(int i=0;i&lt;d1.size();i++) { cout&lt;&lt;d1.at(i)&lt;&lt;\" \"; } cout&lt;&lt;endl; cout&lt;&lt;\"第一个元素是：\"&lt;&lt;d1.front()&lt;&lt;endl; cout&lt;&lt;\"最后一个元素是：\"&lt;&lt;d1.back()&lt;&lt;endl; } int main() { test(); return 0; } 排序操作#include &lt;iostream&gt; #include&lt;deque&gt; #include &lt;algorithm&gt; using namespace std; void printDeque(const deque&lt;int&gt;&amp;d) { for(deque&lt;int&gt;::const_iterator it=d.begin();it!=d.end();it++) { cout&lt;&lt;*it&lt;&lt;\" \"; } cout&lt;&lt;endl; } int main() { deque&lt;int&gt;d1; //尾插 d1.push_back(40); d1.push_back(20); d1.push_back(70); d1.push_back(40); //头插 d1.push_front(100); cout&lt;&lt;\"排序前：\"; printDeque(d1); sort(d1.begin(),d1.end()); cout&lt;&lt;\"排序后：\"; printDeque(d1); return 0; } stack基本概念#include &lt;iostream&gt; #include &lt;stack&gt; using namespace std; void test() { stack&lt;int&gt;s; s.push(1); s.push(2); s.push(3); s.push(4); cout&lt;&lt;\"栈的大小是：\"&lt;&lt;s.size()&lt;&lt;endl; while(!s.empty()) { cout&lt;&lt;\"栈顶元素是：\"&lt;&lt;s.top()&lt;&lt;endl; s.pop(); } cout&lt;&lt;\"栈的大小是：\"&lt;&lt;s.size()&lt;&lt;endl; } int main() { test(); return 0; } 构造函数#include &lt;iostream&gt; #include &lt;list&gt; using namespace std; void printList(const list&lt;int&gt;&amp;l) { for(list&lt;int&gt;::const_iterator it=l.begin();it!=l.end();it++) { cout&lt;&lt;*it&lt;&lt;\" \"; } cout&lt;&lt;endl; } void test() { list&lt;int&gt;L; L.push_back(10); L.push_back(20); L.push_back(30); L.push_back(40); L.push_back(50); printList(L); //区间方式构造 list&lt;int&gt;L1(L.begin(),L.end()); printList(L1); //copy构造 list&lt;int&gt;L2(L); printList(L2); //n个elem list&lt;int&gt;L3(5,100); printList(L3); } int main() { test(); return 0; } 赋值和交换#include &lt;iostream&gt; #include &lt;list&gt; using namespace std; void printList(const list&lt;int&gt;&amp;l) { for(list&lt;int&gt;::const_iterator it=l.begin();it!=l.end();it++) { cout&lt;&lt;*it&lt;&lt;\" \"; } cout&lt;&lt;endl; } void test() { list&lt;int&gt;L; //尾插法 L.push_back(10); L.push_back(20); L.push_back(30); L.push_back(40); L.push_back(50); printList(L); //operator=赋值 list&lt;int&gt;L1; L1=L; printList(L1); list&lt;int&gt;L2; L2.assign(L1.begin(),L1.end()); printList(L2); list&lt;int&gt;L3; L3.assign(5,100); printList(L3); cout&lt;&lt;\"交换前：\"&lt;&lt;endl; cout&lt;&lt;\"L2：\"; printList(L2); cout&lt;&lt;\"L3：\"; printList(L3); L2.swap(L3); cout&lt;&lt;\"交换后：\"&lt;&lt;endl; cout&lt;&lt;\"L2：\"; printList(L2); cout&lt;&lt;\"L3：\"; printList(L3); } int main() { test(); return 0; } 大小操作#include &lt;iostream&gt; #include &lt;list&gt; using namespace std; void printList(const list&lt;int&gt;&amp;l) { for(list&lt;int&gt;::const_iterator it=l.begin();it!=l.end();it++) { cout&lt;&lt;*it&lt;&lt;\" \"; } cout&lt;&lt;endl; } void test() { list&lt;int&gt;L; //尾插法 L.push_back(10); L.push_back(20); L.push_back(30); L.push_back(40); L.push_back(50); printList(L); if(L.empty()) { cout&lt;&lt;\"为空\"&lt;&lt;endl; } else { cout&lt;&lt;\"不为空\"&lt;&lt;endl; cout&lt;&lt;\"L大小：\"&lt;&lt;L.size()&lt;&lt;endl; } //重新指定大小 L.resize(15,1); printList(L); L.resize(3); printList(L); } int main() { test(); return 0; } 插入和删除#include &lt;iostream&gt; #include &lt;list&gt; using namespace std; void printList(const list&lt;int&gt;&amp;l) { for(list&lt;int&gt;::const_iterator it=l.begin();it!=l.end();it++) { cout&lt;&lt;*it&lt;&lt;\" \"; } cout&lt;&lt;endl; } void test() { list&lt;int&gt;L; //尾插法 L.push_back(10); L.push_back(20); L.push_back(30); L.push_back(40); L.push_back(50); printList(L); L.push_front(100); printList(L); //尾删 L.pop_back(); printList(L); //头删 L.pop_front(); printList(L); //insert插入 L.insert(L.begin(),1,1000); printList(L); //按照区间插入 L.insert(L.begin(),L.begin(),L.end()); printList(L); //移除 L.push_back(1000); printList(L); L.remove(1000); printList(L); //删除 list&lt;int&gt;::iterator it=L.begin(); it++; L.erase(it); printList(L); //按区间删除 L.erase(L.begin(),L.end());//清空 printList(L); //清空 L.clear(); printList(L); } int main() { test(); return 0; } 数据存取#include &lt;iostream&gt; #include &lt;list&gt; using namespace std; void test() { list&lt;int&gt;L; //尾插法 L.push_back(10); L.push_back(20); L.push_back(30); L.push_back(40); L.push_back(50); cout&lt;&lt;\"第一个元素是：\"&lt;&lt;L.front()&lt;&lt;endl; cout&lt;&lt;\"最后一个元素是：\"&lt;&lt;L.back()&lt;&lt;endl; list&lt;int&gt;::iterator it=L.begin(); it++; cout&lt;&lt;*it&lt;&lt;endl; } int main() { test(); return 0; } 反转与排序#include &lt;iostream&gt; #include &lt;list&gt; using namespace std; void printList(const list&lt;int&gt;&amp;l) { for(list&lt;int&gt;::const_iterator it=l.begin();it!=l.end();it++) { cout&lt;&lt;*it&lt;&lt;\" \"; } cout&lt;&lt;endl; } bool myCompare(int v1,int v2) { return v1&gt;v2; } void test() { list&lt;int&gt;L; //尾插法 L.push_back(10); L.push_back(30); L.push_back(20); L.push_back(60); L.push_back(50); cout&lt;&lt;\"反转前：\"; printList(L); cout&lt;&lt;\"反转后：\"; L.reverse(); printList(L); //升序排序 cout&lt;&lt;\"排序后：\"; L.sort(); printList(L); //降序排序 L.sort(myCompare); printList(L); } int main() { test(); return 0; } set构造和赋值#include &lt;iostream&gt; #include &lt;set&gt; using namespace std; void printSet(set&lt;int&gt;&amp;s) { for(set&lt;int&gt;::iterator it=s.begin();it!=s.end();it++) { cout&lt;&lt;*it&lt;&lt;\" \"; } cout&lt;&lt;endl; } int main() { set&lt;int&gt;s; //插入时自动排序 s.insert(50); s.insert(20); s.insert(60); s.insert(40); printSet(s); //copy构造 set&lt;int&gt;s1; s1=s; printSet(s1); return 0; } 大小和交换#include &lt;iostream&gt; #include &lt;set&gt; using namespace std; void printSet(set&lt;int&gt;&amp;s) { for(set&lt;int&gt;::iterator it=s.begin();it!=s.end();it++) { cout&lt;&lt;*it&lt;&lt;\" \"; } cout&lt;&lt;endl; } int main() { set&lt;int&gt;s; //插入时自动排序 //不允许有相同元素 s.insert(50); s.insert(20); s.insert(60); s.insert(40); set&lt;int&gt;s1; s1.insert(50); s1.insert(80); s1.insert(30); s1.insert(40); printSet(s); if(s.empty()) { cout&lt;&lt;\"为空\"&lt;&lt;endl; } else { cout&lt;&lt;\"不为空\"&lt;&lt;endl; cout&lt;&lt;\"d1大小：\"&lt;&lt;s.size()&lt;&lt;endl; } //交换 cout&lt;&lt;\"交换前：\"&lt;&lt;endl; cout&lt;&lt;\"s: \"; printSet(s); cout&lt;&lt;\"s1: \"; printSet(s1); cout&lt;&lt;\"交换后：\"&lt;&lt;endl; s.swap(s1); cout&lt;&lt;\"s: \"; printSet(s); cout&lt;&lt;\"s1: \"; printSet(s1); } 插入和删除#include &lt;iostream&gt; #include &lt;set&gt; using namespace std; void printSet(set&lt;int&gt;&amp;s) { for(set&lt;int&gt;::iterator it=s.begin();it!=s.end();it++) { cout&lt;&lt;*it&lt;&lt;\" \"; } cout&lt;&lt;endl; } int main() { set&lt;int&gt;s; //插入时自动排序 //不允许有相同元素 //插入 s.insert(50); s.insert(20); s.insert(60); s.insert(40); printSet(s); //删除 s.erase(s.begin()); printSet(s); s.erase(50); printSet(s); //清空 s.clear(); printSet(s); } 查找和统计#include &lt;iostream&gt; #include &lt;set&gt; using namespace std; int main() { set&lt;int&gt;s; //插入时自动排序 //不允许有相同元素 //插入 s.insert(50); s.insert(20); s.insert(60); s.insert(40); //查找 set&lt;int&gt;::iterator pos=s.find(20); if(pos!=s.end()) { cout&lt;&lt;\"找到元素：\"&lt;&lt;*pos&lt;&lt;endl; } else { cout&lt;&lt;\"未找到元素\"&lt;&lt;endl; } //统计0/1 int num=s.count(10); cout&lt;&lt;num&lt;&lt;endl; return 0; } set和multiser的区别#include &lt;iostream&gt; #include &lt;set&gt; using namespace std; int main() { //mutiset能插重复的元素 } pair对组的创建#include &lt;iostream&gt; using namespace std; int main() { pair&lt;string,int&gt;p(\"管大爷\",20); cout&lt;&lt;\"姓名：\"&lt;&lt;p.first&lt;&lt;\" 年龄：\"&lt;&lt;p.second&lt;&lt;endl; pair&lt;string,int&gt;p1=make_pair(\"关二爷\",20); cout&lt;&lt;\"姓名：\"&lt;&lt;p1.first&lt;&lt;\" 年龄：\"&lt;&lt;p1.second&lt;&lt;endl; return 0; } set排序#include &lt;iostream&gt; #include &lt;set&gt; using namespace std; class MyCompare { public: bool operator()(int v1,int v2) { return v1&gt;v2; } }; int main() { set&lt;int,MyCompare&gt;s; //插入时自动排序 //不允许有相同元素 //插入 s.insert(50); s.insert(20); s.insert(60); s.insert(40); for(set&lt;int,MyCompare&gt;::iterator it=s.begin();it!=s.end();it++) { cout&lt;&lt;*it &lt;&lt;\" \"; } cout&lt;&lt;endl; return 0; } 构造和赋值#include &lt;iostream&gt; #include&lt;map&gt; using namespace std; void printMap(map&lt;int,int&gt;&amp;m) { for(map&lt;int,int&gt;::iterator it=m.begin();it!=m.end();it++) { //cout&lt;&lt;\"key= \"&lt;&lt;(*it).first&lt;&lt;\" value= \"&lt;&lt;(*it).second&lt;&lt;endl; cout&lt;&lt;\"key= \"&lt;&lt;it-&gt;first&lt;&lt;\" value= \"&lt;&lt;it-&gt;second&lt;&lt;endl; } cout&lt;&lt;endl; } void test() { map&lt;int,int&gt;m; m.insert(pair&lt;int,int&gt;(1,10)); m.insert(pair&lt;int,int&gt;(5,11)); m.insert(pair&lt;int,int&gt;(3,12)); m.insert(pair&lt;int,int&gt;(4,13)); printMap(m); //copy构造 map&lt;int,int&gt;m1(m); printMap(m1); //赋值 map&lt;int,int&gt;m2; m2=m; printMap(m2); } int main() { //map不允许重复key值 //multimap允许 //自动按key排序 test(); return 0; } 大小和交换#include &lt;iostream&gt; #include&lt;map&gt; using namespace std; void printMap(map&lt;int,int&gt;&amp;m) { for(map&lt;int,int&gt;::iterator it=m.begin();it!=m.end();it++) { //cout&lt;&lt;\"key= \"&lt;&lt;(*it).first&lt;&lt;\" value= \"&lt;&lt;(*it).second&lt;&lt;endl; cout&lt;&lt;\"key= \"&lt;&lt;it-&gt;first&lt;&lt;\" value= \"&lt;&lt;it-&gt;second&lt;&lt;endl; } cout&lt;&lt;endl; } void test() { map&lt;int,int&gt;m; m.insert(pair&lt;int,int&gt;(1,10)); m.insert(pair&lt;int,int&gt;(5,11)); m.insert(pair&lt;int,int&gt;(3,12)); m.insert(pair&lt;int,int&gt;(4,13)); printMap(m); if(m.empty()) { cout&lt;&lt;\"m为空\"&lt;&lt;endl; } else { cout&lt;&lt;\"不为空\"&lt;&lt;endl; cout&lt;&lt;\"m的大小是：\"&lt;&lt;m.size()&lt;&lt;endl; } //交换 map&lt;int,int&gt;m1; m1.insert(pair&lt;int,int&gt;(2,10)); m1.insert(pair&lt;int,int&gt;(6,11)); m1.insert(pair&lt;int,int&gt;(1,12)); m1.insert(pair&lt;int,int&gt;(4,13)); cout&lt;&lt;\"交换前：\"&lt;&lt;endl; cout&lt;&lt;\"m: \"; printMap(m); cout&lt;&lt;\"m1: \"; printMap(m1); cout&lt;&lt;\"交换后：\"&lt;&lt;endl; m.swap(m1); cout&lt;&lt;\"m: \"; printMap(m); cout&lt;&lt;\"m1: \"; printMap(m1); } int main() { //map不允许重复key值 //multimap允许 //自动按key排序 test(); return 0; } 插入和删除#include &lt;iostream&gt; #include&lt;map&gt; using namespace std; void printMap(map&lt;int,int&gt;&amp;m) { for(map&lt;int,int&gt;::iterator it=m.begin();it!=m.end();it++) { //cout&lt;&lt;\"key= \"&lt;&lt;(*it).first&lt;&lt;\" value= \"&lt;&lt;(*it).second&lt;&lt;endl; cout&lt;&lt;\"key= \"&lt;&lt;it-&gt;first&lt;&lt;\" value= \"&lt;&lt;it-&gt;second&lt;&lt;endl; } cout&lt;&lt;endl; } void test() { map&lt;int,int&gt;m; //第一种 m.insert(pair&lt;int,int&gt;(1,10)); //第二种 m.insert(make_pair(2,10)); //第三种 m.insert(map&lt;int,int&gt;::value_type(3,30)); //第四种 m[4]=40;//利用这种插入重复的会修改value //而前面的几种不会修改value printMap(m); //删除 m.erase(m.begin()); printMap(m); m.erase(1);//按key删除 printMap(m); } int main() { //map不允许重复key值 //multimap允许 //自动按key排序 test(); return 0; } 查找和统计#include &lt;iostream&gt; #include&lt;map&gt; using namespace std; int main() { map&lt;int,int&gt;m; m.insert(pair&lt;int,int&gt;(1,10)); m.insert(pair&lt;int,int&gt;(5,11)); m.insert(pair&lt;int,int&gt;(3,12)); m.insert(pair&lt;int,int&gt;(4,13)); map&lt;int,int&gt;::iterator pos=m.find(3); if(pos!=m.end()) { cout&lt;&lt;\"key找到元素key= \"&lt;&lt;pos-&gt;first&lt;&lt;\" value= \"&lt;&lt;pos-&gt;second&lt;&lt;endl; } else { cout&lt;&lt;\"未找到\"&lt;&lt;endl; } //统计0/1 int num=m.count(3); cout&lt;&lt;\"num = \"&lt;&lt;num&lt;&lt;endl; return 0; } 排序#include &lt;iostream&gt; #include &lt;map&gt; using namespace std; class MyCompare { public: bool operator()(int v1,int v2) { return v1&gt;v2; } }; int main() { map&lt;int,int,MyCompare&gt;m; m.insert(pair&lt;int,int&gt;(1,10)); m.insert(pair&lt;int,int&gt;(5,11)); m.insert(pair&lt;int,int&gt;(3,12)); m.insert(pair&lt;int,int&gt;(4,13)); for(map&lt;int,int,MyCompare&gt;::iterator it=m.begin();it!=m.end();it++) { //cout&lt;&lt;\"key= \"&lt;&lt;(*it).first&lt;&lt;\" value= \"&lt;&lt;(*it).second&lt;&lt;endl; cout&lt;&lt;\"key= \"&lt;&lt;it-&gt;first&lt;&lt;\" value= \"&lt;&lt;it-&gt;second&lt;&lt;endl; } cout&lt;&lt;endl; return 0; } 常用遍历算法for_each#include &lt;iostream&gt; #include&lt;vector&gt; #include &lt;algorithm&gt; using namespace std; void print01(int val) { cout&lt;&lt;val&lt;&lt;\" \"; } int main() { vector&lt;int&gt;v; for(int i=0;i&lt;10;i++) { v.push_back(i); } for_each(v.begin(),v.end(),print01); cout&lt;&lt;endl; return 0; } transform#include &lt;iostream&gt; #include &lt;algorithm&gt; #include &lt;vector&gt; using namespace std; class Transform { public: int operator()(int v) { return v; } }; void print01(int val) { cout&lt;&lt;val&lt;&lt;\" \"; } int main() { //搬运容器到另一个容器中 vector&lt;int&gt;v; for(int i=0;i&lt;10;i++) { v.push_back(i); } vector&lt;int&gt;Target; Target.resize(v.size());//提前 开辟空间 transform(v.begin(),v.end(),Target.begin(),Transform()); for_each(Target.begin(),Target.end(),print01); return 0; } find#include &lt;iostream&gt; #include &lt;algorithm&gt; #include &lt;vector&gt; using namespace std; int main() { //查找元素 vector&lt;int&gt;v; for(int i=0;i&lt;10;i++) { v.push_back(i); } vector&lt;int&gt;::iterator pos=find(v.begin(),v.end(),5); if(pos==v.end()) { cout&lt;&lt;\"没找到\"&lt;&lt;endl; } else { cout&lt;&lt;\"找到：\"&lt;&lt;*pos&lt;&lt;endl; } return 0; } find_if#include &lt;iostream&gt; #include &lt;algorithm&gt; #include &lt;vector&gt; using namespace std; class GreaterFive { public: bool operator()(int val) { return val&gt;5; } }; int main() { //查找指定要求的元素 vector&lt;int&gt;v; for(int i=0;i&lt;10;i++) { v.push_back(i); } vector&lt;int&gt;::iterator pos=find_if(v.begin(),v.end(),GreaterFive()); if(pos==v.end()) { cout&lt;&lt;\"没找到\"&lt;&lt;endl; } else { cout&lt;&lt;\"找到：\"&lt;&lt;*pos&lt;&lt;endl; } return 0; } adjacent_find#include &lt;iostream&gt; #include &lt;algorithm&gt; #include &lt;vector&gt; using namespace std; int main() { //查找相邻重复元素 vector&lt;int&gt;v; v.push_back(2); v.push_back(3); v.push_back(3); v.push_back(4); v.push_back(3); vector&lt;int&gt;::iterator pos=adjacent_find(v.begin(),v.end()); if(pos==v.end()) { cout&lt;&lt;\"没找到\"&lt;&lt;endl; } else { cout&lt;&lt;\"找到：\"&lt;&lt;*pos&lt;&lt;endl; } return 0; } binary_search#include &lt;iostream&gt; #include &lt;algorithm&gt; #include &lt;vector&gt; using namespace std; int main() { //查找有序序列元素 //二分查找 vector&lt;int&gt;v; for(int i=0;i&lt;10;i++) { v.push_back(i); } bool pos=binary_search(v.begin(),v.end(),9); if(pos) { cout&lt;&lt;\"找到\"&lt;&lt;endl; } else { cout&lt;&lt;\"没找到\"&lt;&lt;endl; } return 0; } count#include &lt;iostream&gt; #include&lt;vector&gt; #include &lt;algorithm&gt; using namespace std; int main() { //统计元素个数 vector&lt;int&gt;v; for(int i=0;i&lt;10;i++) { v.push_back(2); } int num=count(v.begin(),v.end(),2); cout&lt;&lt;\"2的个数是：\"&lt;&lt;num&lt;&lt;endl; return 0; } count_if#include &lt;iostream&gt; #include&lt;vector&gt; #include &lt;algorithm&gt; using namespace std; class GreaterTwo { public: bool operator()(int val) { return val&gt;2; } }; int main() { //按条件统计元素个数 vector&lt;int&gt;v; for(int i=0;i&lt;10;i++) { v.push_back(i); } int num=count_if(v.begin(),v.end(),GreaterTwo()); cout&lt;&lt;\"大于2的个数是：\"&lt;&lt;num&lt;&lt;endl; return 0; } sort#include &lt;iostream&gt; #include&lt;vector&gt; #include &lt;algorithm&gt; #include &lt;functional&gt; using namespace std; void print01(int val) { cout&lt;&lt;val&lt;&lt;\" \"; } int main() { //sort升序 vector&lt;int&gt;v; v.push_back(30); v.push_back(33); v.push_back(11); sort(v.begin(),v.end()); for_each(v.begin(),v.end(),print01); cout&lt;&lt;endl; //降序 sort(v.begin(),v.end(),greater&lt;int&gt;()); for_each(v.begin(),v.end(),print01); return 0; } merge#include &lt;iostream&gt; #include&lt;vector&gt; #include &lt;algorithm&gt; #include &lt;functional&gt; using namespace std; void print01(int val) { cout&lt;&lt;val&lt;&lt;\" \"; } int main() { //将两个有序序列合并成一个有序序列 vector&lt;int&gt;v; vector&lt;int&gt;v1; vector&lt;int&gt;v2; for(int i=0;i&lt;10;i++) { v.push_back(i); } for(int i=3;i&lt;22;i++) { v1.push_back(i); } v2.resize(v.size()+v1.size()); merge(v.begin(),v.end(),v1.begin(),v1.end(),v2.begin()); for_each(v2.begin(),v2.end(),print01); return 0; } reverse#include &lt;iostream&gt; #include&lt;vector&gt; #include &lt;algorithm&gt; using namespace std; void print01(int val) { cout&lt;&lt;val&lt;&lt;\" \"; } int main() { //将容器元素反转 vector&lt;int&gt;v; for(int i=0;i&lt;10;i++) { v.push_back(i); } cout&lt;&lt;\"反转前：\"; for_each(v.begin(),v.end(),print01); cout&lt;&lt;endl; reverse(v.begin(),v.end()); cout&lt;&lt;\"反转后：\"; for_each(v.begin(),v.end(),print01); return 0; } copy#include &lt;iostream&gt; #include&lt;vector&gt; #include &lt;algorithm&gt; using namespace std; void print01(int val) { cout&lt;&lt;val&lt;&lt;\" \"; } int main() { //将容器元素反转 vector&lt;int&gt;v; vector&lt;int&gt;v1; for(int i=0;i&lt;10;i++) { v.push_back(i); } v1.resize(v.size()); copy(v.begin(),v.end(),v1.begin()); for_each(v1.begin(),v1.end(),print01); return 0; } replace#include &lt;iostream&gt; #include&lt;vector&gt; #include &lt;algorithm&gt; using namespace std; void print01(int val) { cout&lt;&lt;val&lt;&lt;\" \"; } int main() { //将容器内指定范围元素修改为新元素 vector&lt;int&gt;v; for(int i=0;i&lt;10;i++) { v.push_back(i); } cout&lt;&lt;\"替换前：\"; for_each(v.begin(),v.end(),print01); cout&lt;&lt;endl; replace(v.begin(),v.end(),2,99); cout&lt;&lt;\"替换后：\"; for_each(v.begin(),v.end(),print01); return 0; } replace_if#include &lt;iostream&gt; #include&lt;vector&gt; #include &lt;algorithm&gt; using namespace std; void print01(int val) { cout&lt;&lt;val&lt;&lt;\" \"; } class Greater3 { public: bool operator()(int val) { return val&gt;=3; } }; int main() { //将容器内指定范围满足指定条件元素修改为新元素 vector&lt;int&gt;v; for(int i=0;i&lt;10;i++) { v.push_back(i); } cout&lt;&lt;\"替换前：\"; for_each(v.begin(),v.end(),print01); cout&lt;&lt;endl; replace_if(v.begin(),v.end(),Greater3(),99); cout&lt;&lt;\"替换后：\"; for_each(v.begin(),v.end(),print01); return 0; } swap#include &lt;iostream&gt; #include&lt;vector&gt; #include &lt;algorithm&gt; using namespace std; void print01(int val) { cout&lt;&lt;val&lt;&lt;\" \"; } int main() { //将两个容器互换 vector&lt;int&gt;v; vector&lt;int&gt;v1; for(int i=0;i&lt;10;i++) { v.push_back(i); } for(int i=10;i&gt;0;i--) { v1.push_back(i); } cout&lt;&lt;\"交换前：\"&lt;&lt;endl&lt;&lt;\"v：\"; for_each(v.begin(),v.end(),print01); cout&lt;&lt;endl&lt;&lt;\"v1：\"; for_each(v1.begin(),v1.end(),print01); cout&lt;&lt;endl; swap(v,v1); cout&lt;&lt;\"交换后：\"&lt;&lt;endl&lt;&lt;\"v：\"; for_each(v.begin(),v.end(),print01); cout&lt;&lt;endl&lt;&lt;\"v1：\"; for_each(v1.begin(),v1.end(),print01); return 0; } accumulation#include &lt;iostream&gt; #include&lt;vector&gt; #include &lt;numeric&gt; using namespace std; void print01(int val) { cout&lt;&lt;val&lt;&lt;\" \"; } int main() { //算出容器元素总和 vector&lt;int&gt;v; for(int i=0;i&lt;=100;i++) { v.push_back(i); } int num=accumulate(v.begin(),v.end(),0); //参数3是起始累加值 cout&lt;&lt;\"总和是：\"&lt;&lt;num&lt;&lt;endl; return 0; } fill#include &lt;iostream&gt; #include &lt;vector&gt; #include&lt;numeric&gt; #include&lt;algorithm&gt; using namespace std; void print01(int val) { cout&lt;&lt;val&lt;&lt;\" \"; } int main() { //在指定区间填充元素 vector&lt;int&gt;v; //v.resize(10); for(int i=0;i&lt;10;i++) { v.push_back(i); } fill(v.begin()+4,v.end(),100); for_each(v.begin(),v.end(),print01); return 0; } set_intersection#include &lt;iostream&gt; #include&lt;vector&gt; #include &lt;algorithm&gt; using namespace std; void print01(int val) { cout&lt;&lt;val&lt;&lt;\" \"; } int main() { //求两个容器交集 vector&lt;int&gt;v; vector&lt;int&gt;v1; for(int i=0;i&lt;10;i++) { v.push_back(i); } for(int i=4;i&lt;15;i++) { v1.push_back(i); } vector&lt;int&gt;v2; v2.resize(min(v.size(),v1.size())); cout&lt;&lt;\"v：\"; for_each(v.begin(),v.end(),print01); cout&lt;&lt;endl&lt;&lt;\"v1：\"; for_each(v1.begin(),v1.end(),print01); cout&lt;&lt;endl; vector&lt;int&gt;::iterator it=set_intersection(v.begin(),v.end(),v1.begin(),v1.end(),v2.begin()); //it返回最后位置 cout&lt;&lt;\"交集：\"&lt;&lt;endl&lt;&lt;\"v2：\"; for_each(v2.begin(),it,print01); return 0; } set_union#include &lt;iostream&gt; #include&lt;vector&gt; #include &lt;algorithm&gt; using namespace std; void print01(int val) { cout&lt;&lt;val&lt;&lt;\" \"; } int main() { //求两个容器并集 vector&lt;int&gt;v; vector&lt;int&gt;v1; for(int i=0;i&lt;10;i++) { v.push_back(i); } for(int i=4;i&lt;15;i++) { v1.push_back(i); } vector&lt;int&gt;v2; v2.resize(v.size()+v1.size()); cout&lt;&lt;\"v：\"; for_each(v.begin(),v.end(),print01); cout&lt;&lt;endl&lt;&lt;\"v1：\"; for_each(v1.begin(),v1.end(),print01); cout&lt;&lt;endl; vector&lt;int&gt;::iterator it=set_union(v.begin(),v.end(),v1.begin(),v1.end(),v2.begin()); //it返回最后位置 cout&lt;&lt;\"并集：\"&lt;&lt;endl&lt;&lt;\"v2：\"; for_each(v2.begin(),it,print01); return 0; } set_difference#include &lt;iostream&gt; #include&lt;vector&gt; #include &lt;algorithm&gt; using namespace std; void print01(int val) { cout&lt;&lt;val&lt;&lt;\" \"; } int main() { //求两个容器差集 vector&lt;int&gt;v; vector&lt;int&gt;v1; for(int i=0;i&lt;10;i++) { v.push_back(i); } for(int i=4;i&lt;15;i++) { v1.push_back(i); } vector&lt;int&gt;v2; v2.resize(max(v.size(),v1.size())); cout&lt;&lt;\"v：\"; for_each(v.begin(),v.end(),print01); cout&lt;&lt;endl&lt;&lt;\"v1：\"; for_each(v1.begin(),v1.end(),print01); cout&lt;&lt;endl; vector&lt;int&gt;::iterator it=set_difference(v.begin(),v.end(),v1.begin(),v1.end(),v2.begin()); //it返回最后位置 cout&lt;&lt;\"v和v1差集：\"&lt;&lt;endl&lt;&lt;\"v2：\"; for_each(v2.begin(),it,print01); cout&lt;&lt;endl; it=set_difference(v1.begin(),v1.end(),v.begin(),v.end(),v2.begin()); //it返回最后位置 cout&lt;&lt;\"v1和v差集：\"&lt;&lt;endl&lt;&lt;\"v2：\"; for_each(v2.begin(),it,print01); return 0; }","categories":[{"name":"学习","slug":"学习","permalink":"https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://www.guanshunxin.com/tags/Algorithm/"}]},{"title":"c++结构体和指针","slug":"14-C","date":"2022-07-03T09:12:20.000Z","updated":"2022-07-03T13:54:57.790Z","comments":true,"path":"posts/14.html","link":"","permalink":"https://www.guanshunxin.com/posts/14.html","excerpt":"","text":"指针const修饰指针#include &lt;iostream&gt; using namespace std; int main() { int a=1,b=2; //常量指针 指针的指向的值不能改，指向能改 const int *p=&amp;a; //*p=20; //错误 p=&amp;b;//正确 //指针常量 指针的指向的指向不能改，值能改 int *const p1=&amp;b; *p=20; //正确 //p=&amp;b;//错误 //指针指向的值和指向都不能改 const int * const p2=&amp;a; cout&lt;&lt;*p&lt;&lt;endl; cout&lt;&lt;*p1&lt;&lt;endl; cout&lt;&lt;*p2&lt;&lt;endl; return 0; } 指针和数组#include &lt;iostream&gt; using namespace std; int main() { int arr[10]={1,2,8,4,5,6,7,8,9,10}; int *p=arr;//arr就是数组首地址 cout&lt;&lt;*p&lt;&lt;endl; p++;//指针向后偏移四个字节也就是2因为是int型 cout&lt;&lt;*p&lt;&lt;endl; int *p2=arr; for(int i=0;i&lt;10;i++) { cout&lt;&lt;*p2&lt;&lt;endl; p2++; } return 0; } 指针和函数#include &lt;iostream&gt; using namespace std; void swap1(int a,int b) { int temp=a; a=b; b=temp; cout&lt;&lt;\"swap1 a= \"&lt;&lt;a&lt;&lt;endl; cout&lt;&lt;\"swap1 b= \"&lt;&lt;b&lt;&lt;endl; } void swap2(int *p,int *p1) { int temp=*p; *p=*p1; *p1=temp; } int main() { //值传递 int a=10; int b=20; swap1(a,b); cout&lt;&lt;\"a= \"&lt;&lt;a&lt;&lt;endl; cout&lt;&lt;\"b= \"&lt;&lt;b&lt;&lt;endl; //地址传递 swap2(&amp;a,&amp;b); cout&lt;&lt;\"a= \"&lt;&lt;a&lt;&lt;endl; cout&lt;&lt;\"b= \"&lt;&lt;b&lt;&lt;endl; return 0; } 结构体结构体#include &lt;iostream&gt; using namespace std; struct student { string name; int age; int score; }s3;//顺便创建一个结构体变量 int main() { //结构体变量创建方式1 student s1; s1.name=\"gsx\"; s1.age=10; s1.score=100; cout&lt;&lt;s1.name&lt;&lt;endl; cout&lt;&lt;s1.age&lt;&lt;endl; cout&lt;&lt;s1.score&lt;&lt;endl; //结构体变量创建方式2 student s2={\"gdy\",18,150}; cout&lt;&lt;s2.name&lt;&lt;endl; cout&lt;&lt;s2.age&lt;&lt;endl; cout&lt;&lt;s2.score&lt;&lt;endl; s3.name=\"gey\"; s3.age=20; s3.score=150; //结构体变量创建方式3 cout&lt;&lt;s3.name&lt;&lt;endl; cout&lt;&lt;s3.age&lt;&lt;endl; cout&lt;&lt;s3.score&lt;&lt;endl; s3 d; return 0; } 结构体数组#include &lt;iostream&gt; using namespace std; struct student { string name; int age; int score; }; int main() { //创建结构体数组 student stuArray[3]= { {\"张三\",12,112}, {\"李四\",22,312}, {\"王五\",22,32} }; //给结构体数组党的元素赋值 stuArray[2].name=\"管大爷\"; //遍历结构体数组 for(int i=0;i&lt;3;i++) { cout&lt;&lt;\"名字：\"&lt;&lt;stuArray[i].name &lt;&lt;\" 年龄：\"&lt;&lt;stuArray[i].age &lt;&lt;\" 分数：\"&lt;&lt;stuArray[i].score &lt;&lt;endl; } return 0; } 结构体指针#include &lt;iostream&gt; using namespace std; struct student { string name; int age; int score; }; int main() { student s={\"管大爷\",18,150}; //通过指针指向结构体变量 student *p =&amp;s; //通过指针访问结构体变量中的数据 cout&lt;&lt;\"姓名：\"&lt;&lt;p-&gt;name&lt;&lt;\" 年龄：\"&lt;&lt;p-&gt;age&lt;&lt;\" 分数：\"&lt;&lt;p-&gt;score&lt;&lt;endl; return 0; } 数据结构结构体解释二叉树中的中的 BiTNode 和*BiTree 是什么，typedef struct BiTNode{ TElemType data; struct BiTNode *lchild typedef struct BiTNode{ TElemType data; struct BiTNode *lchild,*rchild; }BiTNode,*BiTree; 第四行代码中的 BiTNode 和*BiTree 是什么 其实这里让你迷糊的点并不是结构体，而是typedef的使用，耐心的看。 typedef的定义： typedef为C语言的关键字，作用是为一种数据类型定义一个新名字。这里的数据类型包括内部数据类型（int,char等）和自定义的数据类型（struct等）。 在编程中使用typedef目的一般有两个，一个是给变量一个易记且意义明确的新名字，另一个是简化一些比较复杂的类型声明。 比如，typedef char ch；//给char取了个别名，叫ch，以后叫ch就是叫char了【这里还想到了#define，见下一篇】。 所以，严奶奶这里的 typedef struct BiTNode{ TElemType data; struct BiTNode *lchild,*rchild; }BiTNode,*BiTree; 你要这样对比着看t：ypedef char ch typedef struct BiTNode{ TElemType data; struct BiTNode *lchild,*rchild;} BiTNode;（先不说*BiTree，道理一样） 明白了吧，就是取了个别名。为什么要这样呢？ 因为c语言的结构体是应该这样定义的： struct tagMyStruct { int iNum; long lLength; }; 分析：tagMyStruct称为“tag”，即“标签”，实际上是一个临时名字，struct 关键字和tagMyStruct一起，构成了这个结构类型，不论是否有typedef，这个结构都存在。 我们可以用struct tagMyStruct varName来定义变量，但要注意，使用tagMyStruct varName来定义变量是不对的，因为struct 和tagMyStruct合在一起才能表示一个结构类型。 当我们这样定义的时候： typedef struct tagMyStruct { int iNum; long lLength; } MyStruct; MyStruct实际上相当于struct tagMyStruct，我们可以使用MyStruct varName来定义变量。 =================================================================================================================== 当用下面的代码定义一个结构时，编译器报了一个错误，为什么呢？莫非C语言不允许在结构中包含指向它自己的指针吗？ typedef struct tagNode { char *pItem; pNode pNext; } *pNode; 答：C语言当然允许在结构中包含指向它自己的指针，我们可以在建立链表等数据结构的实现上看到无数这样的例子，上述代码的根本问题在于typedef的应用。 根据我们上面的阐述可以知道：新结构建立的过程中遇到了pNext域的声明，类型是pNode，要知道pNode表示的是类型的新名字，那么在类型本身还没有建立完成的时候，这个类型的新名字也还不存在，也就是说这个时候编译器根本不认识pNode。 解决这个问题的方法有多种： 1)、typedef struct tagNode { char *pItem; struct tagNode *pNext; } *pNode; 2)、typedef struct tagNode *pNode; struct tagNode { char *pItem; pNode pNext; }; 注意：在这个例子中，你用typedef给一个还未完全声明的类型起新名字。C语言编译器支持这种做法。 3)、规范做法： struct tagNode { char *pItem; struct tagNode *pNext; }; typedef struct tagNode *pNode; 原作者博客链接：https://blog.csdn.net/xiaoninvhuang/article/details/64442729","categories":[{"name":"学习","slug":"学习","permalink":"https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://www.guanshunxin.com/tags/Algorithm/"}]},{"title":"装箱问题","slug":"13-Agorithm","date":"2022-05-14T10:53:20.000Z","updated":"2022-05-14T11:26:53.819Z","comments":true,"path":"posts/13.html","link":"","permalink":"https://www.guanshunxin.com/posts/13.html","excerpt":"","text":"装箱问题问题描述有一个箱子容量为 V（正整数，0&lt;=V&lt;=20000），同时有 n 个物品（0＜n&lt;=30），每个物品有一个体积（正整数）。现在在 n 个物品中，任取若干个装入箱内，使得箱子的剩余空间为最小。输入输入：一个整数v，表示箱子容量一个整数n，表示有n个物品接下来 n 个整数，分别表示这 n 个物品的各自体积输出输出：一个整数，表示箱子最小的剩余空间输入样例2468312797输出样例0 思路可设一个元素个数为 max(v)+1的数组dp[20001]，里面任意一个元素dp[i]表示箱子容积为 i 时可放入的物品的体积。因为物品的体积并不是单位体积，因此dp[i]并不一定等于i，例如有3个物体，体积分别为3,4,5，那么容积为3和4的箱子可放入的物品的体积均为3，即dp[3] = dp[4] = 3。对于每一个物体，都有两种选择-放入或者不放入，所以外层循环可对每个物品进行遍历，而每选择一个物品，定会对大于该物品体积的dp数组元素产生影响，从而还需要一个内层数组对大于该物品体积的dp数组元素进行遍历更新。更新方法为：dp[i] = max{dp[i],dp[i-vi]+vi}，其中vi为当前物品的体积，max中的dp[i]表示不放入该物体时的解，dp[i-vi]+vi表示放入该物体时的解（i-vi表示给即将放入的物品留出合适的体积，如之前的例子，dp[i-vi]并不一定等于dp[i]-vi），取最大值，即为最优解。需要注意的是，需要先将dp数组中的每一个元素初始化为0。 题解思考一下：剩余容量最小，也就是装进去的物品体积最大，那么假设物品的价值就是物品的体积，岂不是就是转换成了普通的背包问题，最后求出来的，dp[V]，就是价值(体积)最大的情况，也就是剩余容量最小。背包问题状态转移方程：dp[j]: 容量为j时，价值(体积)最大为dp[j]dp[j] = max(dp[j],dp[j-v[i]]+v[i]) 代码#include&lt;bits/stdc++.h&gt; using namespace std; int V;//箱子体积 int n;//个数 int a[31]; //存放物品的体积 int dp[20001]={0}; //dp[i]表示箱子容积为i时可放入的物品的体积 ，注意要初始化为0 int main () { int i,j; int t; scanf(\"%d\",&amp;V); scanf(\"%d\",&amp;n); for(i=0;i&lt;n;i++) scanf(\"%d\",&amp;a[i]); cout&lt;&lt;\"每次遍历下的j和dp[j]: \"&lt;&lt;endl; for(i=0;i&lt;n;i++)//外循环，遍历每个箱子 { for(j=V;j&gt;=a[i];j--)//内循环，遍历每个容积 { //更新该容积下的最优放入物品，也就是价值（体积）最大 dp[j]=max(dp[j],(dp[j-a[i]]+a[i])); if(j&gt;=10) cout&lt;&lt;setw(2)&lt;&lt;j&lt;&lt;\": \"&lt;&lt;setw(2)&lt;&lt;dp[j]&lt;&lt;\" \"; else cout&lt;&lt;setw(2)&lt;&lt;j&lt;&lt;\": \"&lt;&lt;setw(2)&lt;&lt;dp[j]&lt;&lt;\" \"; } cout&lt;&lt;endl; } cout&lt;&lt;\"最小的容积是：\"&lt;&lt;V-dp[V]&lt;&lt;endl; //输出最小的容积 return 0; } 输出结果","categories":[{"name":"学习","slug":"学习","permalink":"https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://www.guanshunxin.com/tags/Algorithm/"}]},{"title":"最优服务次序问题","slug":"12-Algorithm","date":"2022-05-14T06:35:32.000Z","updated":"2022-05-14T07:24:30.796Z","comments":true,"path":"posts/12.html","link":"","permalink":"https://www.guanshunxin.com/posts/12.html","excerpt":"","text":"最优服务次序问题问题描述：设有n个顾客同时等待一项服务。顾客i需要的服务时间为ti。应如何安排n个顾客的服务次序才能使平均等待时间达到最小?注意：（平均等待时间是n个顾客等待直到完成服务的时间）总和除以n。 对于给定的n个顾客需要的服务时间，编程计算最优服务次序。 Input 测试数据第一行是正整数n(n&lt;=1000)，表示有n个顾客。接下来的1行中，有n个正整数，表示n个顾客需要的服务时间ti(ti&lt;=1000)。 Output 输出最小平均等待时间，每个答案一行，保留2位小数。 Sample Input10 56 12 1 99 1000 234 33 55 99 812Sample Output532 选取策略：每次选取在剩余顾客当中，所需服务时间最短的顾客进行服务。即将顾客所需的服务时间进行排序，每次选择排序后的第一个顾客进行服务。 贪心策略的证明：本文采取交换论证的证明方法。 交换论证：假设有一个不同于贪心算法的其他算法，得到的问题的最优解，我们交换其他算法中的某些步骤或者变量，使其成为贪心算法，得到的最优解不会变差。 对本题的证明：t[i] 表示第i个顾客所需的服务时间，T[i]表示第i个顾客所需的等待时间。根据贪心策略，当i&lt;j时，t[i]&lt;=t[j]（由小到大进行排序）每个顾客的等待时间，T(1)=t[1],T(2)=t[1]+t[2],T(3)=t[1]+t[2],………,T(n)=t[1]+t[2]+…+t[n]所以总的等待时间表示为：T=n*t[1]+(n-1)t[2]+……+2t[n-1]+t[n]. 取 a,b 两个数满足 1&lt;=a&lt;b&lt;=n,交换上式中的第a项和第b项，此时得到总时间和为T2因为交换两项对其他项没有影响。 所以T2-T=（b-a）*(t[b]-t[a]) (b-a)&gt;0,(t[b]-t[a])&gt;=0, (T2-T)&gt;=0所以对任意两项进行交换都无法使等待时间变得更短，因此贪心策略正确。 #include &lt;iostream&gt; #include &lt;algorithm&gt; using namespace std; int main() { int n; cin&gt;&gt;n; int a[n]; for(int i=1; i&lt;=n; i++) { cin&gt;&gt;a[i]; } sort(a+1,a+n+1); //第一种写法 int count=n;//count为每个顾客在所有顾客等待时间中所占次数 int sum=0;//用于保存总的等待时间 for(int i=1; i&lt;=n; i++) { sum=sum+a[i]*count; count--; } //第二种写法 int sum=0;//用于保存总的等待时间 int tep=0;//用于保存下一个顾客的等待时间 for(int i=1;i&lt;=n;i++) { sum+=tep;//加上该顾客的等待时间 sum+=a[i];//加上该顾客的服务时间 tep+=a[i];//下个顾客的等待时间 } cout&lt;&lt;sum/n&lt;&lt;endl; return 0; } 多次最优服务次序问题设有n 个顾客同时等待一项服务。顾客i需要的服务时间为t i，1≤i≤n。共有s处可以提供此项服务。应如何安排n 个顾客的服务次序才能使平均等待时间达到最小?平均等待时间是n 个顾客等待服务直到完成服务的时间的总和除以n。 对于给定的n 个顾客需要的服务时间和s的值，计算最优服务次序。Input 输入数据的第一行有2 个正整数n （n≤10000）和s（s≤1000），表示有n 个顾客且有s 处可以提供顾客需要的服务。接下来的1 行中，有n个正整数，表示n个顾客需要的服务时间。Output 输出数据只有一个整数（计算结果四舍五入），表示计算出的最小平均等待时间。Sample Input 10 2 56 12 1 99 1000 234 33 55 99 812Sample Output 336 算法思想：排序完之后一次选择窗口服务，例如：有10个服务两个窗口，那么让F1等待1号窗口，F2等待2号窗口，F3等待1号窗口，F4等待2号窗口,F5等待1号窗口…… #include&lt;bits/stdc++.h&gt; using namespace std; int main() { int n,s; cin&gt;&gt;n&gt;&gt;s; int a[n]; for(int i=0; i&lt;n; i++) cin&gt;&gt;a[i]; sort(a,a+n); int sum=0; int t[s]= {0}; for(int i=0; i&lt;n; i++) { t[i%s]=t[i%s]+a[i]; sum=sum+t[i%s]; } sort(t,t+s); printf(\"%.2f\\n\",sum*1.0/n); return 0; }","categories":[{"name":"学习","slug":"学习","permalink":"https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://www.guanshunxin.com/tags/Algorithm/"}]},{"title":"PHP","slug":"11-php","date":"2022-03-18T14:16:45.000Z","updated":"2022-03-18T14:17:04.108Z","comments":true,"path":"posts/11.html","link":"","permalink":"https://www.guanshunxin.com/posts/11.html","excerpt":"","text":"基本语法注释和变量&lt;?php //echo 'hello world'; /*注释*/ //单行注释 $name=1; // unset($name); echo $name; $abc=\"gsx\"; echo $abc; $a='sb'; $$a='sss'; echo $sb;//可变变量 $b=100; $c=&amp;$b;//类似指针 $c=20; echo $b;//20 $d=true; echo $d; var_dump($d); var_dump($abc); $a1=\"te{$b}st\"; echo $a1; $s=&lt;&lt;&lt;aaa sss dd fggfg ergrwgwgeergs; aaa; echo $s; $q='sd'; $w=(int)$q; echo $w; define('MY_NAME','管大爷'); echo MY_NAME; echo __FILE__; echo __LINE__; $d1=1; $d2=2; echo $d1+$d2; echo $d1*$d2; echo $d2-$d2; echo '&lt;br/&gt;'; echo $d1/$d2; ?&gt; 连接字符串&lt;?php $s1='asd'; $s2='efw'; echo '&lt;br/&gt;'; echo $s1.$s2; echo '&lt;br/&gt;'; $s2.=$s1; echo $s2; $q1='11'; $q2=11; var_dump($q1!=$q2); var_dump($q1!==$q2);?&gt; 函数&lt;?php function gdy() { echo 'hdy'; } gdy(); $qw=12; define('ddssd','ddd'); function test() { echo ddssd; global $qw;//声明$qw为全局变量就可以在函数内部使用了 echo $qw; } test(); function test1() { static $we=12;//初始化变量，仅在第一次调用 echo ++$we;//第二次调用依然在 } test1(); echo '&lt;br/&gt;'; test1(); //可变参数列表 function test2() { var_dump(func_get_args());//参数列表 var_dump(func_get_arg(0));//列表第一个 var_dump(func_num_args());//返回传入列表个数 } test2(21,23213,324,'asfasf'); //可变函数 function test3() { echo '我是你爹'; } $r='test3'; $r();?&gt; 数组&lt;?php //数组 $student[0]=11; $student[1]=true; $student[2]='sdas'; print_r($student); var_dump($student); $student1=array(12,'管大爷',true,34,6); var_dump($student1); $student2['num']=100; $student2['name']='管大爷'; $student2['grade']=65.2; var_dump($student2); echo $student2['name']; $student3=array( 0=&gt;11, 1=&gt;'管大爷', 2=&gt;true ); var_dump($student3); $student4=array( 0=&gt;array(1,'ds',true), 1=&gt;array(2,3,'dd') ); var_dump($student4); $arr=array( 'a','b','c','d','e' ); echo count($arr);//返回数组元素个数 $arr1=array( array(1,2,3), array(4,6,7) ); echo '&lt;br/&gt;'; echo count($arr); echo '&lt;br/&gt;'; echo count($arr,1); echo '&lt;br/&gt;'; //foreach遍历数组 foreach($student2 as $gd) { echo $gd.'&lt;br/&gt;'; }; foreach($student2 as $key=&gt;$gd) { echo $key.'=&gt;'.$gd.'&lt;br/&gt;'; } var_dump($_GET); //处理数组的相关函数 //1.统计数组元素出现的次数 $array=array(1,\"hello\",\"world\",\"hello\"); print_r(array_count_values($array)); //2.检测给定的键值或索引是否出现在数组中 $search_array=array('first'=&gt;1,'second'=&gt;4); var_dump(array_key_exists('second',$search_array)); //3.在数组中搜索给定的值，如果成功则返回键名 $array = array(0 =&gt; 'blue', 1 =&gt; 'red', 2 =&gt; 'green', 3 =&gt; 'red'); $key = array_search('green', $array); // $key = 2; $key = array_search('red', $array); // $key = 1; ?&gt; 处理字符串&lt;?php //去除字符串首尾的空白字符:trim($str) //去除左边的字符：ltrim($str) //去除右边的字符：rtrim($str) //去除字符串中的字符abc:trim($str,'bac') //大小写转换函数 //大写转换：strtoupper //小写转换：strtolower //字符串查找函数 //计算字符串里出现的次数：subtsr_count($str,'sb'); //查找字符串首次出现的位置：strpos($str,'t'); //找到字符串出现后的所有字符串：strstr($str,'s'); //字符串替换函数str_replace('t','T',$str); //定界符&lt;&lt;&lt; $str1=&lt;&lt;&lt;START &lt;p style=\"color:red;font-size:28px;\"&gt;管大爷&lt;/p&gt; START; echo $str1; echo \"\\n\"; echo htmlspecialchars($str1); //去除标签 strip_tags($str,\"&lt;div&gt;\"); //字符串截取函数substr($str,3); //字符串分割函数 //explode(',',$str); //explode(',',$str,2); //将字符串分割为数组str_split($str,1) ?&gt; 表单&lt;?php // var_dump($_POST); var_dump($_GET); ?&gt; &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;POST&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- &lt;form method='post'&gt; 姓名:&lt;input type=\"text\" name=\"username\"&gt;&lt;br/&gt; 性别:&lt;input type=\"text\" name=\"sex\"&gt;&lt;br/&gt; &lt;input type=\"submit\" value=\"提交\"&gt; &lt;/form&gt; --&gt; &lt;form method='get'&gt; 姓名:&lt;input type=\"text\" name=\"username\"&gt;&lt;br/&gt; 性别:&lt;input type=\"text\" name=\"sex\"&gt;&lt;br/&gt; &lt;input type=\"submit\" value=\"提交\"&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; 正则表达式&lt;?php $patten='/test/'; $str='ajsbuijtestlnk'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //小写和大写相反例如d,D //\\d代表0~9之间的任意一个数 $patten='/t\\dst/'; $str='ajsbuijt1stlnk'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //\\D代表除了0~9之外的任意一个数 $patten='/t\\Dst/'; $str='ajsbuijtwstlnk'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //\\s匹配一个空格,换行符制表符等 $patten='/t\\sst/'; $str='ajsbuijt stlnk'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //\\w匹配任意一个字母，数字，下划线 $patten='/t\\wst/'; $str='ajsbuijtestlnk'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 ?&gt; 元字符&lt;?php //.匹配换行符以外的任意一个字符。匹配.的时候用\\. $patten='/t.st/'; $str='ajsbuijtestlnk'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //*匹配0次，1次，或多次前面的字符 $patten='/te*st/'; $str='ajsbuijteeeeeeeestlnk'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //+匹配1次，或多次前面的字符 $patten='/te+st/'; $str='ajsbuijtestlnk'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //?匹配0次或一次 $patten='/te?st/'; $str='ajsbuijteeeeeeeestlnk'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //{n}前面的字符正好出现n次 $patten='/te{2}st/'; $str='ajsbuijteestlnk'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //{n,}前面的字符出现大于或等于n次 $patten='/te{2,}st/'; $str='ajsbuijteeeeeeeestlnk'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //{n,m}前面的字符出现n~m次 $patten='/te{2,3}st/'; $str='ajsbuijteeeeeeeestlnk'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //.与{n}配合 $patten='/t.{2}st/'; $str='ajsbuijtsestlnk'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //.与*配合 $patten='/t.*st/'; $str='ajsbuijteeeeeeeestlnk'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //^或\\A匹配字符串开始位置与后面的字符是否相等 $patten='/^test/'; $str='testjsbuijtestlnk'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //$\\A匹配字符串结束位置与最后的字符是否相等 $patten='/test$/'; $str='ajsbuijteeeeeeeestest'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //$与^配合使用 $patten='/^test$/'; $str='test'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //|或的意思 $patten='/test|asc/'; $str='ajsbtestabcasc'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //[]匹配[]中的任意一个字符 //[^]除了其中的字符都能匹配 $patten='/t[^s]st/'; $str='ajsbuijtsstlnktfst'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //模式修正符 //匹配括号里的后面数字也匹配 $patten='/t(.)(.)t\\\\1\\\\2/'; $str=' testes '; var_dump(preg_match_all($patten,$str,$arr)); var_dump($arr); //i大小写都能匹配 $patten='/test/i'; $str=' test Test tESt '; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //m目标字符串必须出现\\n;正则表达式必须出现$或^,多行匹配 $patten='/^test/m'; $str=\"test\\ntest\\ntest\\ntest\"; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //如果用了s则.将匹配所有字符 $patten='/t.st/s'; $str=\"ajsbuijt\\nstlnktfst\"; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //U禁止贪婪匹配 $patten='/t.*t/U'; $str='tajsbuijtsstlnktfst'; var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 //与正则表达式配合的函数 $patten='/t(.*?)st/'; $str='test tsdsadasst tfjstjlj tsdiast'; var_dump(preg_match($patten,$str,$arr));//返回字符串个数 // var_dump(preg_match_all($patten,$str,$arr));//返回字符串个数 var_dump($arr);//返回字符串数组 if(preg_match($patten,$str)) { echo \"找到了\"; } // preg_replace()正则表达式；要替换的字符串；目标字符串 $patten='/&lt;div(.*?)&gt;(.*?)&lt;\\/div&gt;/'; $str1='&lt;a$1&gt;$2&lt;/a&gt;'; $str='yajsd&lt;div style=\"color:red;\"&gt;efdaefa&lt;/div&gt;sasas&lt;div&gt;sdasd&lt;/div&gt; asas'; if(preg_match($patten,$str,$arr)) { echo '找到了'; echo preg_replace($patten,$str1,$str); } else{ echo \"没找到\"; } ?&gt; 信息表单&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;?php // 定义变量并设置为空值 $nameErr = $emailErr = $genderErr = $websiteErr = \"\"; $name = $email = $gender = $comment = $website = \"\"; if ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") { if (empty($_POST[\"name\"])) { $nameErr = \"Name is required\"; } else { $name = test_input($_POST[\"name\"]); // 检查名字是否包含字母和空格 if (!preg_match(\"/^[a-zA-Z ]*$/\",$name)) { $nameErr = \"Only letters and white space allowed\"; } } if (empty($_POST[\"email\"])) { $emailErr = \"Email is required\"; } else { $email = test_input($_POST[\"email\"]); // 检查电邮地址语法是否有效 if (!preg_match(\"/([\\w\\-]+\\@[\\w\\-]+\\.[\\w\\-]+)/\",$email)) { $emailErr = \"Invalid email format\"; } } if (empty($_POST[\"website\"])) { $website = \"\"; } else { $website = test_input($_POST[\"website\"]); // 检查 URL 地址语言是否有效（此正则表达式同样允许 URL 中的下划线） if (!preg_match(\"/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&amp;@#\\/%?=~_|!:,.;]*[-a-z0-9+&amp;@#\\/%=~_|]/i\",$website)) { $websiteErr = \"Invalid URL\"; } } if (empty($_POST[\"comment\"])) { $comment = \"\"; } else { $comment = test_input($_POST[\"comment\"]); } if (empty($_POST[\"gender\"])) { $genderErr = \"Gender is required\"; } else { $gender = test_input($_POST[\"gender\"]); } } ?&gt; &lt;?php // 定义变量并设置为空值 function test_input($data) { $data = trim($data); $data = stripslashes($data); $data = htmlspecialchars($data); // echo $data; return $data; } ?&gt; &lt;div style=\"color:red;font-family:宋体;position: absolute; left: 50%;top:50%;transform:translate(-50%,-50%);border:1px solid green;border-radius:20px;width:600px;height:600px;\"&gt; &lt;div style=\" width:400px;height:auto;margin:auto;\"&gt; &lt;form method=\"post\" action=\"&lt;?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]);?&gt;\"&gt; &lt;div style=\"width:400px;height:auto;\"&gt;&lt;span style=\"margin:left;float:left;\"&gt;Name: &lt;/span&gt;&lt;div style=\"display:inline-block;float:left;\"&gt;&lt;input type=\"text\" name=\"name\" value=\"&lt;?php echo $name;?&gt;\" &gt;&lt;/div &gt;&lt;span class=\"error\" style=\"float:left;\"&gt;* &lt;?php echo $nameErr;?&gt;&lt;/span&gt;&lt;/div&gt; &lt;br&gt;&lt;br&gt; E-mail:&lt;input type=\"text\" name=\"email\"value=\"&lt;?php echo $email;?&gt;\"&gt;&lt;span class=\"error\"&gt;* &lt;?php echo $emailErr;?&gt;&lt;/span&gt; &lt;br&gt;&lt;br&gt; Website:&lt;input type=\"text\" name=\"website\"value=\"&lt;?php echo $website;?&gt;\"&gt;&lt;span class=\"error\"&gt;&lt;?php echo $websiteErr;?&gt;&lt;/span&gt; &lt;br&gt;&lt;br&gt; Comment: &lt;textarea name=\"comment\" rows=\"5\" cols=\"40\"&gt;&lt;?php echo $comment;?&gt;&lt;/textarea&gt; &lt;br&gt;&lt;br&gt; Gender:&lt;input type=\"radio\" name=\"gender\" &lt;?php if (isset($gender) &amp;&amp; $gender==\"female\") echo \"checked\";?&gt; value=\"female\"&gt;Female &lt;input type=\"radio\" name=\"gender\" &lt;?php if (isset($gender) &amp;&amp; $gender==\"male\") echo \"checked\";?&gt; value=\"male\"&gt;Male &lt;span class=\"error\"&gt;* &lt;?php echo $genderErr;?&gt;&lt;/span&gt; &lt;br&gt;&lt;br&gt; &lt;input type=\"submit\" name=\"submit\" value=\"Submit\"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; 时间&lt;?php date_default_timezone_set('Asia/Shanghai'); var_dump(date('Y-m-d G:i:s')); ?&gt; 验证码&lt;?php header('Content-type:image/jpeg'); $width=120; $height=40; $string=''; $element=array('a','b','c','d','e','f','g','q','w','r','t','y','u','i','o','p','s','h','j','k','l','z','x','v','n','m'); for($a=0;$a&lt;4;$a++) { $string.=$element[rand(0,count($element)-1)]; } $img=imagecreatetruecolor($width,$height);//设置长宽 $colorBg=imagecolorallocate($img,rand(200,255),rand(200,255),rand(200,255));//背景颜色 $colorBorder=imagecolorallocate($img,rand(200,255),rand(200,255),rand(200,255));//边框 $colorString=imagecolorallocate($img,rand(10,100),rand(10,100),rand(10,100));//字体颜色 imagefill($img,0,0,$colorBg);//填充颜色 imagerectangle($img,0,0,$width-1,$height-1,$colorBorder);//画个矩形 for($a=1;$a&lt;100;$a++) { imagesetpixel($img,rand(0,$width-1),rand(0,$height-1),imagecolorallocate($img,rand(100,200),rand(100,200),rand(100,200)));//画线 } for($a=1;$a&lt;4;$a++) { imageline($img,rand(0,$width/2),rand(0,$height),rand($width/2,$width),rand(0,$height),imagecolorallocate($img,rand(100,200),rand(100,200),rand(100,200)));//画线 } // imagestring($img,5,0,0,'abcd',$colorString); imagettftext($img,30,5,15,rand(30,35),$colorString,'D:\\wamp\\www\\phplearn\\font\\Kaushanscript.ttf',$string);//字体 imagejpeg($img); imagedestory($img); ?&gt; 文件&lt;?php date_default_timezone_set('Asia/Shanghai'); var_dump(is_file('../1')); var_dump(is_dir('../1')); var_dump(file_exists('../2')); var_dump(filesize('11.php')); echo date('Y-m-d G:i:s',filectime('../1')); echo __FILE__.'&lt;br/&gt;'; echo basename(__FILE__);//返回部分文件名 echo dirname(__FILE__);//返回目录 var_dump(pathinfo(__FILE__));//返回文件路径信息 $dir=opendir('../1'); var_dump(readdir($dir)); ?&gt;","categories":[{"name":"学习","slug":"学习","permalink":"https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://www.guanshunxin.com/tags/PHP/"}]},{"title":"Vue","slug":"10-Vue","date":"2022-02-02T08:17:32.000Z","updated":"2022-02-27T09:47:27.758Z","comments":true,"path":"posts/10.html","link":"","permalink":"https://www.guanshunxin.com/posts/10.html","excerpt":"","text":"Vue初识Vue&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;初识Vue&lt;/title&gt; &lt;script type=\"text/javascript\" src=\"./js/vue.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"root1\"&gt; &lt;h1&gt;hello {{name.toUpperCase()}}&lt;/h1&gt; &lt;/div&gt; &lt;div id=\"root3\"&gt; &lt;h1&gt;hello {{name}}&lt;/h1&gt; &lt;/div&gt; &lt;div id=\"root2\"&gt; &lt;h1&gt;hello {{name}}&lt;/h1&gt; &lt;/div&gt; &lt;script type=\"text/javascript\"&gt; Vue.config.productionTip=false;//设置为 false 以阻止 vue 在启动时生成生产提示。 new Vue({ el:'.root1', data:{ name:'qawqe' } }) new Vue({ el:'#root2', data:{ name:'管大爷3', address: '上海' } }) new Vue({ el:'#root3', data:{ name:'管大爷2', address: '上海' } }) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 模板语法&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;模板语法&lt;/title&gt; &lt;script type=\"text/javascript\" src=\"./js/vue.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"root\"&gt; &lt;h1&gt;插值语法&lt;/h1&gt; &lt;h3&gt;你好，{{name}}&lt;/h3&gt; &lt;hr/&gt; &lt;h1&gt;指令语法&lt;/h1&gt; //v-bind 可以省略 &lt;a v-bind:href=\"school.url\"&gt;点我去看管大爷&lt;/a&gt; &lt;a :href=\"school.url\"&gt;点我去看{{school.name}}&lt;/a&gt; &lt;/div&gt; &lt;/body&gt; &lt;script type=\"text/javascript\"&gt; Vue.config.productionTip=false; new Vue({ el:'#root', data:{ name:'管大爷', school:{ name:'管二爷', url:\"https://guanshunxin.com\" } } }) &lt;/script&gt; &lt;/html&gt; 数据绑定&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;数据绑定&lt;/title&gt; &lt;script type=\"text/javascript\" src=\"./js/vue.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"root1\"&gt; 单向数据绑定：&lt;input type=\"text\" v-bind:value=\"name\"&gt; &lt;br/&gt; 双向数据绑定：&lt;input type=\"text\" v-model=\"name\"&gt; &lt;!-- v-model只能用于表单类元素 --&gt; //v-model相当于指定了value所以value可以省略 &lt;/div&gt; &lt;/body&gt; &lt;script type=\"text/javascript\"&gt; Vue.config.productionTip=false;//设置为 false 以阻止 vue 在启动时生成生产提示。 new Vue({ el:'#root1', data:{ name:'管大爷', } }) &lt;/script&gt; &lt;/html&gt; el与data的两种写法&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;el与data的两种写法&lt;/title&gt; &lt;script type=\"text/javascript\" src=\"./js/vue.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"root\"&gt; &lt;h1&gt;你好，{{name}}，{{a+a}}&lt;/h1&gt; &lt;/div&gt; &lt;/body&gt; &lt;script type=\"text/javascript\"&gt; Vue.config.productionTip=false;//设置为 false 以阻止 vue 在启动时生成生产提示。 //el的两种写法 // const v=new Vue({ // // el:'#root',第一种指定方法 //data的第一种方法 // data:{ // name:'管大爷' // } // }) // v.$mount('#root')//第二种指定方法挂载 //data的第二种写法 new Vue({ el:'#root', data(){ return{ name:'管大爷', a:1 } } }) &lt;/script&gt; &lt;/html&gt; 理解MVVM&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;理解MVVM&lt;/title&gt; &lt;script type=\"text/javascript\" src=\"./js/vue.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"root\"&gt; &lt;h1&gt;学校名称：{{name}}&lt;/h1&gt; &lt;h1&gt;学校地址：{{address}}&lt;/h1&gt; &lt;h1&gt;测试一下1：{{1+1}}&lt;/h1&gt; &lt;h1&gt;测试一下3：{{a+a}}&lt;/h1&gt; &lt;h1&gt;测试一下2：{{2+2}}&lt;/h1&gt; &lt;h1&gt;测试一下4：{{$options}}&lt;/h1&gt;&lt;!-- vue原型上的属性都可以用 --&gt; &lt;h1&gt;测试一下5：{{$emit}}&lt;/h1&gt; &lt;/div&gt; &lt;/body&gt; &lt;script type=\"text/javascript\"&gt; Vue.config.productionTip=false;//设置为 false 以阻止 vue 在启动时生成生产提示。 const vm=new Vue({ el:'#root', data:{ name:'管大爷', address:'北极', a:1 } }) console.log(vm); &lt;/script&gt; &lt;/html&gt; 回顾object.defineproperty方法&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;回顾object.defineproperty方法&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=\"text/javascript\"&gt; Vue.config.productionTip=false;//设置为 false 以阻止 vue 在启动时生成生产提示。 let number=18 let person={ name:'张山', sex:'男' } Object.defineProperty(person,'age',{ // value:18, // enumerable:true,//控制属性是否可枚举，默认是false // writable:true,//控制属性是否能被修改，默认是false // configurable:true,//控制属性是否可以被修改，默认是false //当有人读取person的age属性时，get函数就会被调用，且返回值就是age的值 get(){ console.log(\"有人读取age属性了\") return number }, //当有人修改person的age属性时，set函数(getter)就会被调用，且会收到修改的具体值 set(value) { console.log(\"有人修改了age值，且值是\",value) number=value } }) console.log(Object.keys(person)) console.log(person) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 何为数据代理&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;何为数据代理&lt;/title&gt; &lt;script type=\"text/javascript\" src=\"./js/vue.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; 数据代理，通过一个对象代理对另一个对象中的属性的操作(读/写) &lt;script type=\"text/javascript\"&gt; let obj={x:100} let obj2={y:200} Object.defineProperty(obj2,'x',{//追加一个属性x get(){ return obj.x }, set(value) { obj.x=value } }) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Vue中的数据代理&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Vue中的数据代理&lt;/title&gt; &lt;script type=\"text/javascript\" src=\"./js/vue.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"root\"&gt; &lt;h1&gt;学校名称：{{name}}&lt;/h1&gt; &lt;h1&gt;学校地址：{{address}}&lt;/h1&gt; &lt;/div&gt; &lt;script type=\"text/javascript\"&gt; Vue.config.productionTip=false; const vm=new Vue({ el:\"#root\", data:{ name:'管大爷', address:'河南' } }) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 事件处理&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;事件处理&lt;/title&gt; &lt;script type=\"text/javascript\" src=\"./js/vue.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"root\"&gt; &lt;h2&gt;你好帅{{name}}&lt;/h2&gt; &lt;!-- &lt;button v-on:click=\"showInfo1\"&gt;点我提示信息&lt;/button&gt; --&gt; &lt;button @click=\"showInfo1\"&gt;点我提示信息&lt;/button&gt; &lt;button @click=\"showInfo2(88)\"&gt;点我提示信息&lt;/button&gt; &lt;/div&gt; &lt;script type=\"text/javascript\"&gt; Vue.config.productionTip=false; const vm=new Vue({ el:'#root', data: { name:'管大爷' }, methods:{ showInfo1(event) { alert(\"你在狗叫什么\"); }, showInfo2(number) { console.log(number); } } }) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;","categories":[{"name":"学习","slug":"学习","permalink":"https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"https://www.guanshunxin.com/tags/Vue/"}]},{"title":"MYSQL-函数","slug":"09-mysql5","date":"2022-01-27T05:22:32.000Z","updated":"2022-01-27T09:07:38.063Z","comments":true,"path":"posts/9.html","link":"","permalink":"https://www.guanshunxin.com/posts/9.html","excerpt":"","text":"字符串函数使用函数select 函数 select concat(\"hello\",\"sd\"); 字符串拼接，将s1,s2,s3…sn拼接成一个字符串concat(s1,s2..sn) 将字符串str全部转为小写lower(str)++ 将字符串str全部转为大写upper(str) 左填充，用字符串pad对str左边进行填充，达到n个字符串长度lpad(str,n,pad) 右填充，用字符串pad对str右边进行填充，达到n个字符串长度rpad(str,n,pad) 去掉字符串头部和尾部的空格trim(str) 返回从字符串str从start位置的len个长度的字符串substring(str,start,len) 练习1.由于业务需求变更，企业员工的工号，统一为5位数，目前不足五位数的全部在前面补0，比如，1号员工的工号应该为00001 update tb_user set workno=lpad(workno,5,'0'); 数值函数向上取整ceil(x) 向下取整floor(x) 返回x/y的模mod(x,y) 返回0-1内的随机数rand() 求参数x四舍五入的值，保留y位小数round(x,y) 练习生成六位数的随机验证码 select lpad(round(rand()*1000000,0),6,'0'); 日期函数返回当前日期curdate() 返回当前时间curtime() 返回当前日期和时间now() 获取指定date的年份year(date) 获取指定date月份month(date) 获取指定date的日期day(date) 返回一个日期/时间值加上一个时间间隔expr后的时间值date_add(date,INTERVAL expr type) select date_add(now(),INTERVAL 70 DAY); 返回起始时间date1和结束时间date2之间的天数datediff(date1,date2) select datediff('2021-10-01','2021-12-01'); 练习查询所有员工入职天数,再根据入职天数倒序排序 select name, datediff(curdate(),entrydate) as 'entrydays' from tb_user order by entrydays desc; 流程控制函数如果value为true，则返回fif(value,t,f) select if(false,'ok','error') 如果value1不为空，则返回value1,否则返回value2ifnull(value1,value2) 如果val1为true，返回res1,…否则返回default默认值case when [val1] then [res1] ... else[defalut] end 如果expr的值等于val1,返回res1,…否则返回default默认值case [expr] when [val1] then [res1]... else[default] end 练习1.查询tb_user表的员工姓名和工作地址(北京和上海改为一线城市，其他改为二线) select name, (case workaddress when '北京' then '一线城市' when '上海' then '一线城市' else '二线城市' end) as '工作地址' from tb_user; 2.统计班级各个学员的成绩，展示的规则如下： &gt;=85,展示优秀 &gt;=60,展示及格 否则不及格 select id, name, (case when math&gt;=85 then '优秀' when math&gt;=60 then '及格' else '不及格' end)'数学', (case when english&gt;=85 then '优秀' when english&gt;=60 then '及格' else '不及格' end)'英语', (case when chiness&gt;=85 then '优秀' when chiness&gt;=60 then '及格' else '不及格' end)'语文' from tb_user;","categories":[{"name":"学习","slug":"学习","permalink":"https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"MYSQL","slug":"MYSQL","permalink":"https://www.guanshunxin.com/tags/MYSQL/"}]},{"title":"Ajax","slug":"08-Ajax","date":"2022-01-25T04:28:32.000Z","updated":"2022-01-26T08:20:42.209Z","comments":true,"path":"posts/8.html","link":"","permalink":"https://www.guanshunxin.com/posts/8.html","excerpt":"","text":"AjaxAjax特点Ajax优点可以无需刷新页面与服务器进行通信允许你根据用户事件来更新部分页面内容Ajax缺点没有浏览历史，不能回退存在跨域问题SEO不友好Ajax get请求&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Ajax get 请求&lt;/title&gt; &lt;style type=\"text/css\"&gt; #result{ width: 200px; height: 100px; border: solid 1px #90b; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;button&gt;点击发送请求&lt;/button&gt; &lt;div id=\"result\"&gt;&lt;/div&gt; &lt;script type=\"text/javascript\"&gt; const btn=document.getElementsByTagName('button')[0]; const result=document.getElementById(\"result\"); btn.onclick=function() { //console.log(\"test\"); //1.创建对象 const xhr=new XMLHttpRequest(); //2.初始化 设置请求方法和url xhr.open('GET','http://127.0.0.1:8000/server?a=100&amp;b=20&amp;c=40'); //3.发送 xhr.send(); //4.事件绑定 处理服务端返回的结果 //on when 当....时候 //readysatate 是xhr对象中的属性，表示状态0 1 2 3 4 //change 改变时 xhr.onreadystatechange=function() { //判断（服务端返回了所有结果） if(xhr.readyState===4) { //判断响应状态码 200 404 403 401 500 //2xx 都为成功 if(xhr.status&gt;=200 &amp;&amp; xhr.status&lt;300) { //处理结果 行 头 空行 体 //1.响应行 // console.log(xhr.status);//状态码 // console.log(xhr.statusText);//状态字符串 // console.log(xhr.getAllResponseHeaders());//所有相应头 // console.log(xhr.response);//响应体 //设置result文本 result.innerHTML=xhr.response; } } } } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Ajax post请求&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Ajax get 请求&lt;/title&gt; &lt;style type=\"text/css\"&gt; #result{ width: 200px; height: 100px; border: solid 1px #903; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"result\"&gt;&lt;/div&gt; &lt;script type=\"text/javascript\"&gt; const result=document.getElementById(\"result\"); result.addEventListener(\"mouseover\",function(){ // console.log(\"test\"); //1.创建对象 const xhr=new XMLHttpRequest(); //2.初始化 设置请求方法和url xhr.open('POST','http://127.0.0.1:8000/server'); //设置请求头 xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded'); //自定义请求头 xhr.setRequestHeader('name',\"gsx\"); //3.发送 xhr.send('a=100&amp;b=200&amp;c=300'); //4.事件绑定 处理服务端返回的结果 //on when 当....时候 //readysatate 是xhr对象中的属性，表示状态0 1 2 3 4 //change 改变时 xhr.onreadystatechange=function() { if(xhr.readyState===4) { if(xhr.status&gt;=200 &amp;&amp; xhr.status&lt;300) { result.innerHTML=xhr.response; } } } }) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Ajax 响应json数据&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Ajax get 请求&lt;/title&gt; &lt;style type=\"text/css\"&gt; #result{ width: 200px; height: 100px; border: solid 1px #903; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"result\"&gt;&lt;/div&gt; &lt;script type=\"text/javascript\"&gt; const xhr=document.getElementById('result'); window.onkeydown=function() { // console.log(\"test\"); //1.创建对象 const xhr=new XMLHttpRequest(); //设置响应体数据的类型 xhr.responseType='json'; //2.初始化 设置请求方法和url xhr.open('POST','http://127.0.0.1:8000/json-server'); // //设置请求头 // xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded'); // //自定义请求头 // xhr.setRequestHeader('name',\"gsx\"); //3.发送 xhr.send(); //4.事件绑定 处理服务端返回的结果 //on when 当....时候 //readysatate 是xhr对象中的属性，表示状态0 1 2 3 4 //change 改变时 xhr.onreadystatechange=function() { if(xhr.readyState===4) { if(xhr.status&gt;=200 &amp;&amp; xhr.status&lt;300) { // console.log(xhr.response); // result.innerHTML=xhr.response; //手动对数据转化 // let data=JSON.parse(xhr.response); // console.log(data); // result.innerHTML=data.name; //自动转换 console.log(xhr.response); result.innerHTML=xhr.response.name; } } } } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; IE缓存问题&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;IE缓存问题&lt;/title&gt; &lt;style type=\"text/css\"&gt; #result{ width: 200px; height: 100px; border: solid 1px #90b; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;button&gt;点击发送请求&lt;/button&gt; &lt;div id=\"result\"&gt;&lt;/div&gt; &lt;script type=\"text/javascript\"&gt; const btn=document.getElementsByTagName('button')[0]; const result=document.getElementById(\"result\"); btn.addEventListener('click',function(){ const xhr=new XMLHttpRequest(); //主要加上Date.now(); xhr.open(\"GET\",'http://127.0.0.1:8000/ie?t='+Date.now()); xhr.send(); xhr.onreadystatechange=function(){ if(xhr.readyState===4) { if(xhr.status&gt;=200 &amp;&amp; xhr.status&lt;300) { result.innerHTML=xhr.response; } } } }) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 请求异常与网络超时&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;请求异常与网络超时&lt;/title&gt; &lt;style type=\"text/css\"&gt; #result{ width: 200px; height: 100px; border: solid 1px #90b; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;button&gt;点击发送请求&lt;/button&gt; &lt;div id=\"result\"&gt;&lt;/div&gt; &lt;script type=\"text/javascript\"&gt; const btn=document.getElementsByTagName('button')[0]; const result=document.getElementById(\"result\"); btn.addEventListener('click',function(){ const xhr=new XMLHttpRequest(); //超时设置2s设置 xhr.timeout=2000; //超时回调 xhr.ontimeout=function() { alert(\"网络异常，请稍后重试！！\"); } //网络异常回调 xhr.onerror=function() { alert(\"网络似乎出现了一些问题！\"); } xhr.open(\"GET\",'http://127.0.0.1:8000/delay'); xhr.send(); xhr.onreadystatechange=function(){ if(xhr.readyState===4) { if(xhr.status&gt;=200 &amp;&amp; xhr.status&lt;300) { result.innerHTML=xhr.response; } } } }) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 取消请求&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;取消请求&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;button&gt;点击发送&lt;/button&gt; &lt;button&gt;点击取消&lt;/button&gt; &lt;script type=\"text/javascript\"&gt; const btns=document.querySelectorAll('button'); let x=null; btns[0].onclick=function() { x=new XMLHttpRequest(); x.open('GET','http://127.0.0.1:8000/delay'); x.send(); } //abort btns[1].onclick=function() { x.abort(); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 重复请求&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;重复请求&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;button&gt;点击发送&lt;/button&gt; &lt;script type=\"text/javascript\"&gt; const btns=document.querySelectorAll('button'); let x=null; //标识变量 let isSending=false; btns[0].onclick=function() { //判断标识变量 if(isSending) { //如果正在发送，则取消该请求，创建一个新的请求 x.abort(); } x=new XMLHttpRequest(); //修改标识变量的值 isSending=true; x.open('GET','http://127.0.0.1:8000/delay'); x.send(); x.onreadystatechange=function() { if(x.readyState===4) { //修改标识变量 isSending=false; } } } //abort btns[1].onclick=function() { x.abort(); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; jQuery 发送AJAX请求&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;jQuery 发送 AJAX 请求&lt;/title&gt; &lt;link href=\"https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css\" rel=\"stylesheet\"&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"container\"&gt; &lt;h2 class=\"page-header\"&gt;jQuery发送AJAX请求 &lt;/h2&gt; &lt;button class=\"btn btn-primary\"&gt;GET&lt;/button&gt; &lt;button class=\"btn btn-danger\"&gt;POST&lt;/button&gt; &lt;button class=\"bnt btn-info\"&gt;通用型方法ajax&lt;/button&gt; &lt;/div&gt; &lt;script src=\"https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\"&gt; $('button').eq(0).click(function(){ $.get('http://127.0.0.1:8000/jquery-server',{a:100,b:200},function(data){ console.log(data); },'json') }); $('button').eq(1).click(function(){ $.get('http://127.0.0.1:8000/jquery-server',{a:100,b:200},function(data){ console.log(data); },'json') }); $('button').eq(2).click(function(){ $.ajax({ //url url:'http://127.0.0.1:8000/jquery-server', //参数 data:{a:100,b:200}, //请求类型 type:'GET', //响应体结果 dataType:'json', //成功的回调 success:function(data) { console.log(data); }, //超时时间 timeout:2000, //失败的回调 error:function() { console.log(\"出错了!!\"); }, //头信息 headers:{ c:200, d:300 } }); }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; axios&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;axios&lt;/title&gt; &lt;script crossorigin=\"anonymous\" src=\"https://cdn.bootcdn.net/ajax/libs/axios/0.24.0/axios.min.js\"&gt;&lt;/script&gt; &lt;link href=\"https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css\" rel=\"stylesheet\"&gt; &lt;/head&gt; &lt;body&gt; &lt;button class=\"btn btn-primary\"&gt;GET&lt;/button&gt; &lt;button class=\"btn btn-danger\"&gt;POST&lt;/button&gt; &lt;button class=\"btn btn-primary\"&gt;AJAX&lt;/button&gt; &lt;script type=\"text/javascript\"&gt; const btns=document.querySelectorAll('button'); //配置 baseURL axios.defaults.baseURL = 'http://127.0.0.1:8000'; btns[0].onclick=function() { //GET请求 axios.get('/axios-server',{ //url参数 params:{ id:100, vip:7 }, //请求头信息 headers:{ name:'gdy', age:20 } }).then(value=&gt;{ console.log(value); }); } btns[1].onclick=function() { axios.post('/axios-server',{ username:'admin', password:'123456' },{ //url params:{ id:200, vip:100 }, //请求头 headers:{ height:100, weight:120, } }); } btns[2].onclick=function() { axios({ //请求方法 method:'POST', //url url:'/axios-server', //url参数 params:{ vip:10, level:30 }, //头信息 headers:{ a:100, b:200 }, //请求体参数 data:{ username:'admin', password:'123' } }).then(response=&gt;{ console.log(response); //响应状态码 console.log(response.status); //响应状态字符串 console.log(response.statusText); //响应头信息 console.log(response.headers); //响应体 console.log(response.data); }) } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; fetch 发送AJAX请求&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;fetch 发送 AJAX请求&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;button&gt;AJAX请求&lt;/button&gt; &lt;script type=\"text/javascript\"&gt; const btn=document.querySelector('button'); btn.onclick=function() { fetch('http://127.0.0.1:8000/fetch-server',{ //请求方法 method:'POST', //请求头 headers:{ name:'gdy' }, //请求体 body:'username=admin&amp;password=admin' }).then(response=&gt;{ // return response.text(); return response.json(); }).then(response=&gt;{ console.log(response); }); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; jsonp原理&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;jsonp原理&lt;/title&gt; &lt;style type=\"text/css\"&gt; #result{ width: 300px; height: 100px; border: solid 1px #78a; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"result\"&gt;&lt;/div&gt; &lt;script type=\"text/javascript\"&gt; function handle(data) { const result=document.getElementById('result'); result.innerHTML=data.name; } &lt;/script&gt; &lt;script src=\"http://127.0.0.1:8000/jsonp-server\"&gt; &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; jsonp案例&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;jsonp案例&lt;/title&gt; &lt;/head&gt; &lt;body&gt; 用户名：&lt;input type=\"text\" id=\"username\"&gt; &lt;p&gt;&lt;/p&gt; &lt;script type=\"text/javascript\"&gt; //获取input元素 const input=document.querySelector('input'); const p=document.querySelector('p'); function handle(data) { input.style.border=\"solid 1px #f00\"; p.innerHTML=data.msg; } input.onblur=function() { //获取用户输入值 let username=this.value; //向服务端发送请求，检测用户名是否存在 //1.创建script标签 const script=document.createElement('script'); //2.设置标签的src属性 script.src='http://127.0.0.1:8000/check-username'; //3.将script插入文档中 document.body.appendChild(script); } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; CORS&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;CORS&lt;/title&gt; &lt;style type=\"text/css\"&gt; #result{ width: 300px; height: 100px; border: solid 1px #78a; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;button&gt;发送请求&lt;/button&gt; &lt;div id=\"result\"&gt;&lt;/div&gt; &lt;script type=\"text/javascript\"&gt; const btn=document.querySelector('button'); const result=document.getElementById('result'); btn.onclick=function() { //1.创建对象 const x=new XMLHttpRequest(); //2.初始化设置 x.open('GET',\"http:127.0.0.1:8000/cors-server\"); //3.发送 x.send(); //4.绑定事件 x.onreadystatechange=function() { if(x.readyState===4) { if(x.status&gt;=200&amp;&amp;x.status&lt;300) { //输出响应体 // console.log(x.response); result.innerHTML=x.response; } } } } &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 服务端//1.引入express const express=require('express'); //2.创建应用对象 const app=express(); //3.创建路由规则 //request是请求的报文 //response是响应的报文 app.get('/server',(request,response)=&gt;{ //设置响应头 response.setHeader('Access-Control-Allow-Origin','*'); //设置响应体 response.send('Hello Ajax'); }); //ie缓存问题 app.get('/ie',(request,response)=&gt;{ //设置响应头 response.setHeader('Access-Control-Allow-Origin','*'); //设置响应体 response.send('Hello IE a'); }); //延迟 app.all('/delay',(request,response)=&gt;{ //设置响应头 response.setHeader('Access-Control-Allow-Origin','*'); setTimeout(()=&gt;{ //设置响应体 response.send('延时响应'); },3000) }); //jquery发送ajax请求 app.all('/jquery-server',(request,response)=&gt;{ //设置响应头 response.setHeader('Access-Control-Allow-Origin','*'); response.setHeader('Access-Control-Allow-Headers','*'); //设置响应体 const data = {name: 'gdy'}; // response.send('hello jquery ajax'); response.send(JSON.stringify(data)); }); //axios服务 app.all('/axios-server',(request,response)=&gt;{ //设置响应头 response.setHeader('Access-Control-Allow-Origin','*'); response.setHeader('Access-Control-Allow-Headers','*'); //设置响应体 const data = {name: 'gdy'}; // response.send('hello jquery ajax'); response.send(JSON.stringify(data)); }); //fetch服务 app.all('/fetch-server',(request,response)=&gt;{ //设置响应头 response.setHeader('Access-Control-Allow-Origin','*'); response.setHeader('Access-Control-Allow-Headers','*'); //设置响应体 const data = {name: 'gdy'}; // response.send('hello jquery ajax'); response.send(JSON.stringify(data)); }); //jsonp服务 app.all('/jsonp-server',(request,response)=&gt;{ //response.send('console.log(\"hello\")'); const data={ name:\"gdy\" }; //将数据转化为字符串 let str=JSON.stringify(data); //返回结果 response.end(`handle(${str})`); }); //检测用户名是否存在 app.all('/check-username',(request,response)=&gt;{ //response.send('console.log(\"hello\")'); const data={ exist:1, msg:'用户名已经存在' }; //将数据转化为字符串 let str=JSON.stringify(data); //返回结果 response.end(`handle(${str})`); }); //CORS app.all('/cors-server',(request,response)=&gt;{ //设置响应头 response.setHeader('Access-Control-Allow-Origin','*'); response.send('hello CORS'); }); // app.post('/server',(request,response)=&gt;{ app.all('/server',(request,response)=&gt;{ //设置响应头 response.setHeader('Access-Control-Allow-Origin','*'); //允许自定义响应头 response.setHeader('Access-Control-Allow-Headers','*'); //设置响应体 response.send('Hello Ajax POST'); }); //服务端响应json数据 app.all('/json-server',(request,response)=&gt;{ //设置响应头 response.setHeader('Access-Control-Allow-Origin','*'); //允许自定义响应头 response.setHeader('Access-Control-Allow-Headers','*'); //设置响应体 // response.send('Hello Ajax JSON1'); //响应一个数据 const data={ name:'gsx521521' }; //对对象进行字符串转换 let str=JSON.stringify(data); //设置响应体 response.send(str); }); //4.监听端口启动服务 app.listen(8000,()=&gt;{ console.log(\"服务已经启动，8000 端口监听中....\"); });","categories":[{"name":"学习","slug":"学习","permalink":"https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Ajax","slug":"Ajax","permalink":"https://www.guanshunxin.com/tags/Ajax/"}]},{"title":"Node","slug":"07-nodejs","date":"2022-01-24T13:46:32.000Z","updated":"2022-01-26T10:00:22.869Z","comments":true,"path":"posts/7.html","link":"","permalink":"https://www.guanshunxin.com/posts/7.html","excerpt":"","text":"执行JS文件node JS文件 Node中JS文件引入JS要使用require一个JS文件就是一个模块 require(\"./module.js\"); npm等核心模块可以直接写名字 require(\"express\"); 创建一个对象 var md= require(\"./module.js\"); 每个JS文件中的代码都是独立运行在一个函数中的，而不是全局作用域所以一个模块的变量和函数在其他模块中无法访问向外部暴露变量和方法exports.x=\"我是module.js中的x\" exports.fn=function(){}; 当node执行代码时，他会在代码的最外围添加如下代码function(exports,require,module,_filename,_dirname) { } exports - 该对象用来将变量或函数暴露到外部 require - 函数，用来引入外部模块 module - module代表的是当前模块本身 - exports就是module的属性 - 既可以使用exports导出，也可以使用module.exports导出 _filename - 当前模块完整路径 _dirname - 当前模块所在文件夹的路径 module.exports简略代码,不用一行一行的写exports module.exports={ name:\"猪八戒\", age:18 say:function(){ console.log(\"gsx\"); } } npm 命令npm -v 查看版本 npm 帮助说明 npm search 包名 搜索包 npm install 包名 在当前目录安装包 npm install 包名 -g 在全局模式安装包 npm init 初始化包(生产json文件) npm remove 包名 删除包 npm install 包名 --save 安装包并生成依赖 npm install 下载当前项目所依赖包 Buffer(缓冲区)Buffer的结构和数组很像，操作的方法和数组类似 数组不能储存二进制文件，而buffer就是专门用来储存二进制数据 使用buffer不需要引入模块，直接使用 在buffer中储存的都是二进制数据，但都以16进制形式显示 var str=\"hello\"; var buf = buffer.from(str); console.log(buf); &lt;Buffer 48 65 6c 6c 6f&gt; 创建一个10个字节的buffer var buf=Buffer.alloc(10); 通过索引，来操作buf中的元素 buf[0]=88;十进制方式赋值 buf[1]=0xaa;十六进制赋值 buf.toString 将缓冲区的数据转换成字符串 文件系统fs打开文件fs.openSync(path,flags[,mode]) -path 要打开的文件路径 -flags 打开文件要做操作的类型 r 只读 w 可写 -mode 设置文件的操作权限，一般不传 向文件写入内容fs.writeSync(fd,string[,position[,encoding]]) position 写入的起始位置 var fs=require(\"fs\"); var fd=fs.openSunc(\"hello.txt\",\"w\"); fs.writeSync(fd,\"今天天气不错\"); 关闭文件fs.closeSync(fd); 异步文件写入fs.open(path,flags[,mode],callback) 异步调用的方法 异步调用的方法，结果都是通过回调参数返回的 回调参数 -err 错误对象，如果没有错误则为null -fd 文件的描述符 fs.write(fd,string[,position[,encoding]],callback) fs.open(\"hello.tx\",\"w\",function(err,fd){ //判断是否出错 if(!err) { fs.write(fd,\"这是异步写入的内容\",function(err){ if(!err) { console.log(\"写入成功\"); } fs.close(fd,function(err) { if(!err) { console.log(\"文件已关闭\"); } }) } }) } else { console.log(err); } }); 简单文件写入fs.writeFile(file,data[,options],callback) fs.writeFileSync(file,data[,options]) -file 要写入的文件路径 -data 要写入的数据 -options 选项，可以写入进行一些设置 -callback 当写入完成后执行的函数 a 可以追加内容 var fs=require(\"fs\"); fs.writeFile(\"hello.txt\",\"这是通过writeFile写入的内容\",{flag:\"w\"},function(err) { if(!err) { console.log(\"写入成功\"); } }) 流式文件写入大文件的写入 var fs=require(\"fs\"); 创建一个可写流 fs.createWriteStream(path[,options]) -可以创建一个可写流 -path 文件路径 -option 配置的参数 once(事件字符串，回调函数) 可以为对象绑定一个一次性的事件，该事件会在触发一次后失效 ws.once(\"open\",function(){ console.log(\"流被打开了\"); }) ws.once(\"close\",function(){ console.log(\"流被关闭了\"); }) var ws=fs.createWriteStream(\"hello.txt\"); ws.end(); 文件读取简单文件读取fs.readFile(path[,options],callback) fs.raedFileSync(path[,options]) var fs=require(\"fs\"); fs.readFile(\"hello.txt\",function(err,data){ if(!err) { //console.log(data.toString()); 将data写入文件中 fs.writeFile(\"hello.txt\",data,function(err){ if(!err) { console.log(\"文件写入成功\"); } }) } }) 流式文件读取var fs=require(\"fs\"); var rs=fs.createReadStream(\"a.jpg\"); rs.once(\"open\",function(){ console.log(\"流被打开了\"); }) rs.once(\"close\",function(){ console.log(\"流被关闭了\"); }) rs.on(\"data\",function(data){ console.log(data); }) pipe直接将可读流输出到可写流rs.pipe(ws); fs模块的其他方法检查一个文件是否存在var fs=require(\"fs\"); var isExists=fs.existsSync(\"a.jpg\"); consloe.log(isExists);//false 获取文件信息fs.stat(\"a.mp3\",function(err,stat){ console.log(stat); }); 删除文件fs.unlink(path,callback); fs.unlink(\"hello.txt\") 读取目录结构fs.readdir(\".\",function(err,files){ if(!err) { console.log(files); } }) 截断文件fs.truncateSync(\"hello.txt\",10); 将文件设为指定大小，上例设为10字节 创建目录fs.mkdirSync(\"hello\"); 删除目录fs.rmdirSync(\"hello\"); 重命名文件fs.renameSync(\"原名(路径)\",\"新名(路径)\",function(err){ if(!err) { console.log(\"修改成功\"); } }); 监视文件fs.watchFile(filename[,options],listener) -filename 文件名 -options 配置选项 -listener 回调函数 curr 当前文件大小 prev 修改前文件大小 fs.watchFile(\"hello.txt\",{interval:1000},function(curr,prev){ console.log(\"文件发生变化\"); console.log(\"修改前文件大小:\"+prev.size); console.log(\"修改后文件大小:\"+curr.size); })","categories":[{"name":"学习","slug":"学习","permalink":"https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Node","slug":"Node","permalink":"https://www.guanshunxin.com/tags/Node/"}]},{"title":"MYSQL-DCL","slug":"06-mysql4","date":"2022-01-23T09:33:32.000Z","updated":"2022-01-26T10:00:57.459Z","comments":true,"path":"posts/6.html","link":"","permalink":"https://www.guanshunxin.com/posts/6.html","excerpt":"","text":"DCL-管理用户查询用户use mysql; select * from user; 创建用户create user '用户名' @ '主机名' identified by '密码'; 创建用户itgsx ,只能在当前主机localhost访问，密码123456 create user 'itgsx' @ 'localhost' identified by '123456'; 创建用户itgsx1 ，能在任意主机访问改数据库，密码123456 create user 'itgsx' @ '%' identified by '123456'; 修改用户密码alter user '用户名' @ '主机名' identified with mysql_native_password by '新密码'; alter user 'itgsx1'@'%' identified with mysql_native_password by '1234'; 删除用户drop user '用户名' @ '主机名'; drop user 'itgsx' @'localhost'; DCL-权限控制查询权限show grants for '用户名'@'主机名'; 授予权限grant 权限列表 on 数据库名.表名 to '用户名'@'主机名'; grant all on hxy.* to 'itgsx'@'%';把hxy数据库的所有权限授予itgsx用户 撤销权限revoke 权限列表 on 数据库名.表名 to '用户名'@'主机名'; revoke all on hxy.* to 'itgsx'@'%';撤销itgsx用户在hxy数据库的所有权限","categories":[{"name":"学习","slug":"学习","permalink":"https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"MYSQL","slug":"MYSQL","permalink":"https://www.guanshunxin.com/tags/MYSQL/"}]},{"title":"MYSQL-DQL","slug":"05-mysql3","date":"2022-01-23T09:13:32.000Z","updated":"2022-01-26T09:59:36.614Z","comments":true,"path":"posts/5.html","link":"","permalink":"https://www.guanshunxin.com/posts/5.html","excerpt":"","text":"DQL-数据查询DQL-基础查询1.查询多个字段select 字段1,字段,字段3,... from 表名; select id from tb_user; select * from 表名; 2.设置别名select 字段1[as 别名1],字段2[as 别名2]...from 表名; select id as '编号' from tb_user; as可以省略 3.去除重复记录select distinct 字段列表 from 表名; select distinct id '编号' from tb_user; DQL-条件查询select 字段列表 from 表名 where 条件列表; select * from tb_user where age=20; select * from tb_user where age&gt;20; select * from tb_user where age&gt;=20 and age&lt;=50; 年龄大于20且小于50的 select * from tb_user where age=20 or age=50; 年龄为20或50的 select * from tb_user where age in(15,20,30); 年龄为15,20,30的 select * from tb_user where age between 20 and 50; 年龄在20到50之间的 select * from tb_user where id is null; id为空 select * from tb_user where id is not null; id不为空 select * from tb_user where name like '__'; 查询名字为两个字的名字 select * from tb_user where idcard like '%X' 查询idcard最后一位为X的 DQL-聚合函数null 不会被统计 select count(*) from tb_user; 数据总数量 select count(id) from tb_user; id总数量 select max(age) from tb_user; 年龄最大值 select min(age) from tb_user; 年龄最小值 select avg(age) from tb_user; 年龄平均值 select sum(age) from tb_user where address='河南'; 求河南地区人的年龄的和 DQL-分组查询select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件] 1、根据性别分组，统计男员工和女员工的数量 select gender,count(*) from tb_user group by gender; 2、根据性别分组，统计男员工和女员工的平均年龄 select gender,avg(age) from tb_user group by gender; 3、查询年龄小于45的员工，并根据工作地址分组，获取员工数量大于等于3的工作地址 select workaddress count(*) from tb_user where age&lt;45 group by workaddress having count(*)&gt;=3; DQL-排序查询select 字段列表 from 表名 order by 字段1 排序方式1,字段2 排序方式2; 1、根据年龄对公司的员工进行升序(降序)排序 select * from tb_user order by age asc; 升序asc 可以省略 select * from tb_user order by age desc; 降序 2、根据年龄进行升序排序，如果年龄相同，再按 id 降序排序 select * from tb_user order by age asc, id desc; DQL-分页查询select 字段列表 from 表名 limit 起始索引,查询记录数; select * from tb_user limit 0,10; 练习查询性别为男，且年龄在20-40岁(含）之间的前五个员工信息，对查询的结果按年龄升序排序，年龄相同按id进行升序排序 select * from tb_user where gender='男' and age between 20 and 40 order by age asc,id asc limit 5;","categories":[{"name":"学习","slug":"学习","permalink":"https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"MYSQL","slug":"MYSQL","permalink":"https://www.guanshunxin.com/tags/MYSQL/"}]},{"title":"MYSQL-DML","slug":"04-mysql2","date":"2022-01-22T06:55:32.000Z","updated":"2022-01-23T10:05:28.649Z","comments":true,"path":"posts/4.html","link":"","permalink":"https://www.guanshunxin.com/posts/4.html","excerpt":"","text":"SQL-DML 数据的增删改查添加数据1.给指定字段添加数据insert into 表名(字段名1,字段名2,...) values(值1,值2,...); insert tb_user(id, name, age, gender, nickname) values (1,'gsx',20,'男','ggsx'); 2.给全部字段添加数据insert into 表名 values(值1,值2,...); insert tb_user values (2,'gs2x',20,'男','ggssx'); 3.批量添加数据insert into 表名(字段名1,字段名2,...) values(值1,值2,...),(值1,值2,...),(值1,值2,...); insert tb_user(id, name, age, gender, nickname) values (1,'gsx',20,'男','ggsx'),(2,'gs3x',20,'男','gg3sx'); insert into 表名 values(值1,值2,...),(值1,值2,...),(值1,值2,...); insert tb_user values (2,'gs2x',20,'男','ggssx'),(2,'gs3x',20,'男','gg3sx'); 修改数据update 表名 set 字段名1=值1,字段名2=值2,...[where 条件];不加where 表示全部数据 update tb_user set name='gdy' where id=1; 删除数据delete from 表名 [where 条件]; delete from tb_user where id=1;","categories":[{"name":"学习","slug":"学习","permalink":"https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"MYSQL","slug":"MYSQL","permalink":"https://www.guanshunxin.com/tags/MYSQL/"}]},{"title":"MYSQL-DDL","slug":"03-mysql","date":"2022-01-22T06:54:32.000Z","updated":"2022-01-23T10:05:15.954Z","comments":true,"path":"posts/3.html","link":"","permalink":"https://www.guanshunxin.com/posts/3.html","excerpt":"","text":"DDL-数据库的操作使用windows的命令提示符完成下列操作MYSQL的启动net start mysql MYSQL的停止net stop mysql mysql客户端的连接mysql -uroot -p 然后输入密码进入 查询所有数据库show databases; 查询当前数据库select database(); 创建数据库create database hxy; create database if not exists hxy; 即使数据库存在也不报错 create database hxy default charset utf8mb4;设置指定字符集，推荐使用4个字节的； 删除数据库drop database hxy; drop database if exists hxy; 如果存在就删除，不存在不会报错 使用数据库use hxy; DDL-表操作查看当前数据库所有的表show tables; 创建表create table 字段名( 字段1 字段1类型[comment 字段1注释], 字段2 字段2类型[comment 字段2注释], 字段3 字段3类型[comment 字段3注释], ...... 字段n 字段n类型[comment 字段1注释] )[comment 表注释]; 查询表结构desc tb_user; 查询指定表的建表语句show create table tb_user; 修改表，添加字段alter table 表名 add 字段名 类型(长度) [comment 注释] [约束]; alter table tb_user add nickname varchar(20) comment '昵称'; 修改数据类型alter table 表名 modify 字段名 新数据类型(长度); 修改字段名和字段类型alter table 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束]; alter table tb_user change nickname nickname1 varchar(30) comment '用户名'; 删除字段alter table 表名 drop 字段名; 修改表名alter table 表名 rename to 新表名; 删除表drop table [if exists] 表名; drop table if exists tb_user; 删除指定表，并重新创建该表truncate table 表名;","categories":[{"name":"学习","slug":"学习","permalink":"https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"MYSQL","slug":"MYSQL","permalink":"https://www.guanshunxin.com/tags/MYSQL/"}]},{"title":"Live2d看板娘位置的改变","slug":"02-对live2d看板娘位置的改变","date":"2021-12-04T10:13:30.000Z","updated":"2021-12-05T12:31:13.949Z","comments":true,"path":"posts/2.html","link":"","permalink":"https://www.guanshunxin.com/posts/2.html","excerpt":"","text":"页面上的东西太多了，可爱的看版娘都没地方了，现在就让我们改变它的位置吧 找到L2Dwidget.min.js首先在自己的博客主目录下找到 node_modules ,打开 liv2d-widget 文件夹，编辑 L2Dwidget.min.js。 修改其中的positionCtrl+f 找到position，修改 hOffset 改变的是水平的位置， hOffset 修改垂直位置 （ 根据自己的要求改变 ）","categories":[{"name":"学习","slug":"学习","permalink":"https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://www.guanshunxin.com/tags/Hexo/"}]},{"title":"博客与博主","slug":"01-博客诞生","date":"2021-05-27T13:00:00.000Z","updated":"2021-12-04T09:53:29.782Z","comments":true,"path":"posts/1.html","link":"","permalink":"https://www.guanshunxin.com/posts/1.html","excerpt":"","text":"相遇皆是缘分 为什么建博客？肿么说了! 纯属个人兴趣，好玩，唉，就是玩!嘻嘻! 会有些成就感吧,拥有一个自己的博客写一些自己感兴趣的事或物,不是一件很酷的事嘛! 展望博客我会整理一些个人所学的知识（学前端的，也会捣鼓捣鼓一些其它的专业的知识）或生活方面有兴趣的事发到博客上供大家观摩 关于博主有位可爱的（小）朋友，给我取名叫 “仙气”，这是也是我博客上自居 “仙气” 的由来。喜欢自己所喜欢的，做自己想做的，追求自由与潇洒，多酷啊！ 想法是美好的，可现实… … 给大家推荐一首诗吧 《自由与爱情》---作者:裴多菲 ​ 生命诚可贵 ​ 爱情价更高 ​ 若为自由故 ​ 二者皆可抛 溜溜球啦！","categories":[{"name":"生活","slug":"生活","permalink":"https://www.guanshunxin.com/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"想法","slug":"想法","permalink":"https://www.guanshunxin.com/tags/%E6%83%B3%E6%B3%95/"}]}],"categories":[{"name":"学习","slug":"学习","permalink":"https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"生活","slug":"生活","permalink":"https://www.guanshunxin.com/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://www.guanshunxin.com/tags/Algorithm/"},{"name":"PHP","slug":"PHP","permalink":"https://www.guanshunxin.com/tags/PHP/"},{"name":"Vue","slug":"Vue","permalink":"https://www.guanshunxin.com/tags/Vue/"},{"name":"MYSQL","slug":"MYSQL","permalink":"https://www.guanshunxin.com/tags/MYSQL/"},{"name":"Ajax","slug":"Ajax","permalink":"https://www.guanshunxin.com/tags/Ajax/"},{"name":"Node","slug":"Node","permalink":"https://www.guanshunxin.com/tags/Node/"},{"name":"Hexo","slug":"Hexo","permalink":"https://www.guanshunxin.com/tags/Hexo/"},{"name":"想法","slug":"想法","permalink":"https://www.guanshunxin.com/tags/%E6%83%B3%E6%B3%95/"}]}