<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>guan</title>
  
  <subtitle>GUANの博客</subtitle>
  <link href="https://www.guanshunxin.com/atom.xml" rel="self"/>
  
  <link href="https://www.guanshunxin.com/"/>
  <updated>2022-02-02T08:23:24.025Z</updated>
  <id>https://www.guanshunxin.com/</id>
  
  <author>
    <name>guanshunxin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue</title>
    <link href="https://www.guanshunxin.com/posts/10.html"/>
    <id>https://www.guanshunxin.com/posts/10.html</id>
    <published>2022-02-02T08:17:32.000Z</published>
    <updated>2022-02-02T08:23:24.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="初识Vue"><a href="#初识Vue" class="headerlink" title="初识Vue"></a>初识Vue</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;  &lt;title&gt;初识Vue&lt;/title&gt;  &lt;script type="text/javascript" src="./js/vue.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;  &lt;div class="root1"&gt;    &lt;h1&gt;hello {{name.toUpperCase()}}&lt;/h1&gt;  &lt;/div&gt;  &lt;div id="root3"&gt;    &lt;h1&gt;hello {{name}}&lt;/h1&gt;  &lt;/div&gt;  &lt;div id="root2"&gt;    &lt;h1&gt;hello {{name}}&lt;/h1&gt;  &lt;/div&gt;  &lt;script type="text/javascript"&gt;    Vue.config.productionTip=false;//设置为 false 以阻止 vue 在启动时生成生产提示。    new Vue({      el:'.root1',      data:{        name:'qawqe'      }    })    new Vue({      el:'#root2',      data:{        name:'管大爷3',        address: '上海'      }    })    new Vue({      el:'#root3',      data:{        name:'管大爷2',        address: '上海'      }    })      &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;  &lt;title&gt;模板语法&lt;/title&gt;  &lt;script type="text/javascript" src="./js/vue.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id="root"&gt;    &lt;h1&gt;插值语法&lt;/h1&gt;    &lt;h3&gt;你好，{{name}}&lt;/h3&gt;    &lt;hr/&gt;    &lt;h1&gt;指令语法&lt;/h1&gt;    //v-bind 可以省略    &lt;a v-bind:href="school.url"&gt;点我去看管大爷&lt;/a&gt;    &lt;a :href="school.url"&gt;点我去看{{school.name}}&lt;/a&gt;  &lt;/div&gt;  &lt;/body&gt;&lt;script type="text/javascript"&gt;    Vue.config.productionTip=false;    new Vue({      el:'#root',      data:{        name:'管大爷',        school:{          name:'管二爷',          url:"https://guanshunxin.com"        }              }    })  &lt;/script&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;  &lt;title&gt;数据绑定&lt;/title&gt;  &lt;script type="text/javascript" src="./js/vue.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id="root1"&gt;    单向数据绑定：&lt;input type="text" v-bind:value="name"&gt;    &lt;br/&gt;    双向数据绑定：&lt;input type="text" v-model="name"&gt;    &lt;!-- v-model只能用于表单类元素 --&gt;    //v-model相当于指定了value所以value可以省略  &lt;/div&gt;  &lt;/body&gt;&lt;script type="text/javascript"&gt;  Vue.config.productionTip=false;//设置为 false 以阻止 vue 在启动时生成生产提示。  new Vue({    el:'#root1',    data:{      name:'管大爷',    }  })&lt;/script&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="el与data的两种写法"><a href="#el与data的两种写法" class="headerlink" title="el与data的两种写法"></a>el与data的两种写法</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;  &lt;title&gt;el与data的两种写法&lt;/title&gt;  &lt;script type="text/javascript" src="./js/vue.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id="root"&gt;    &lt;h1&gt;你好，{{name}}，{{a+a}}&lt;/h1&gt;  &lt;/div&gt;&lt;/body&gt;&lt;script type="text/javascript"&gt;  Vue.config.productionTip=false;//设置为 false 以阻止 vue 在启动时生成生产提示。  //el的两种写法  // const v=new Vue({  //  // el:'#root',第一种指定方法  //data的第一种方法  //  data:{  //    name:'管大爷'  //  }  // })  // v.$mount('#root')//第二种指定方法挂载  //data的第二种写法  new Vue({    el:'#root',    data(){      return{        name:'管大爷',        a:1      }    }  })&lt;/script&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue&quot;&gt;&lt;a href=&quot;#Vue&quot; class=&quot;headerlink&quot; title=&quot;Vue&quot;&gt;&lt;/a&gt;Vue&lt;/h1&gt;&lt;h2 id=&quot;初识Vue&quot;&gt;&lt;a href=&quot;#初识Vue&quot; class=&quot;headerlink&quot; title=&quot;初识Vue&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="学习" scheme="https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Vue" scheme="https://www.guanshunxin.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL-函数</title>
    <link href="https://www.guanshunxin.com/posts/9.html"/>
    <id>https://www.guanshunxin.com/posts/9.html</id>
    <published>2022-01-27T05:22:32.000Z</published>
    <updated>2022-01-27T09:07:38.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h1><h2 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h2><pre class="line-numbers language-none"><code class="language-none">select 函数select concat("hello","sd");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="字符串拼接，将s1-s2-s3…sn拼接成一个字符串"><a href="#字符串拼接，将s1-s2-s3…sn拼接成一个字符串" class="headerlink" title="字符串拼接，将s1,s2,s3…sn拼接成一个字符串"></a>字符串拼接，将s1,s2,s3…sn拼接成一个字符串</h2><pre class="line-numbers language-none"><code class="language-none">concat(s1,s2..sn)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="将字符串str全部转为小写"><a href="#将字符串str全部转为小写" class="headerlink" title="将字符串str全部转为小写"></a>将字符串str全部转为小写</h2><pre class="line-numbers language-none"><code class="language-none">lower(str)++<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="将字符串str全部转为大写"><a href="#将字符串str全部转为大写" class="headerlink" title="将字符串str全部转为大写"></a>将字符串str全部转为大写</h2><pre class="line-numbers language-none"><code class="language-none">upper(str)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="左填充，用字符串pad对str左边进行填充，达到n个字符串长度"><a href="#左填充，用字符串pad对str左边进行填充，达到n个字符串长度" class="headerlink" title="左填充，用字符串pad对str左边进行填充，达到n个字符串长度"></a>左填充，用字符串pad对str左边进行填充，达到n个字符串长度</h2><pre class="line-numbers language-none"><code class="language-none">lpad(str,n,pad)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="右填充，用字符串pad对str右边进行填充，达到n个字符串长度"><a href="#右填充，用字符串pad对str右边进行填充，达到n个字符串长度" class="headerlink" title="右填充，用字符串pad对str右边进行填充，达到n个字符串长度"></a>右填充，用字符串pad对str右边进行填充，达到n个字符串长度</h2><pre class="line-numbers language-none"><code class="language-none">rpad(str,n,pad)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="去掉字符串头部和尾部的空格"><a href="#去掉字符串头部和尾部的空格" class="headerlink" title="去掉字符串头部和尾部的空格"></a>去掉字符串头部和尾部的空格</h2><pre class="line-numbers language-none"><code class="language-none">trim(str)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="返回从字符串str从start位置的len个长度的字符串"><a href="#返回从字符串str从start位置的len个长度的字符串" class="headerlink" title="返回从字符串str从start位置的len个长度的字符串"></a>返回从字符串str从start位置的len个长度的字符串</h2><pre class="line-numbers language-none"><code class="language-none">substring(str,start,len)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><pre class="line-numbers language-none"><code class="language-none">1.由于业务需求变更，企业员工的工号，统一为5位数，目前不足五位数的全部在前面补0，比如，1号员工的工号应该为00001update tb_user set workno=lpad(workno,5,'0');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h1><h2 id="向上取整"><a href="#向上取整" class="headerlink" title="向上取整"></a>向上取整</h2><pre class="line-numbers language-none"><code class="language-none">ceil(x)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="向下取整"><a href="#向下取整" class="headerlink" title="向下取整"></a>向下取整</h2><pre class="line-numbers language-none"><code class="language-none">floor(x)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="返回x-y的模"><a href="#返回x-y的模" class="headerlink" title="返回x/y的模"></a>返回x/y的模</h2><pre class="line-numbers language-none"><code class="language-none">mod(x,y)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="返回0-1内的随机数"><a href="#返回0-1内的随机数" class="headerlink" title="返回0-1内的随机数"></a>返回0-1内的随机数</h2><pre class="line-numbers language-none"><code class="language-none">rand()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="求参数x四舍五入的值，保留y位小数"><a href="#求参数x四舍五入的值，保留y位小数" class="headerlink" title="求参数x四舍五入的值，保留y位小数"></a>求参数x四舍五入的值，保留y位小数</h2><pre class="line-numbers language-none"><code class="language-none">round(x,y)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><pre class="line-numbers language-none"><code class="language-none">生成六位数的随机验证码select lpad(round(rand()*1000000,0),6,'0');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h1><h2 id="返回当前日期"><a href="#返回当前日期" class="headerlink" title="返回当前日期"></a>返回当前日期</h2><pre class="line-numbers language-none"><code class="language-none">curdate()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="返回当前时间"><a href="#返回当前时间" class="headerlink" title="返回当前时间"></a>返回当前时间</h2><pre class="line-numbers language-none"><code class="language-none">curtime()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="返回当前日期和时间"><a href="#返回当前日期和时间" class="headerlink" title="返回当前日期和时间"></a>返回当前日期和时间</h2><pre class="line-numbers language-none"><code class="language-none">now()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取指定date的年份"><a href="#获取指定date的年份" class="headerlink" title="获取指定date的年份"></a>获取指定date的年份</h2><pre class="line-numbers language-none"><code class="language-none">year(date)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取指定date月份"><a href="#获取指定date月份" class="headerlink" title="获取指定date月份"></a>获取指定date月份</h2><pre class="line-numbers language-none"><code class="language-none">month(date)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取指定date的日期"><a href="#获取指定date的日期" class="headerlink" title="获取指定date的日期"></a>获取指定date的日期</h2><pre class="line-numbers language-none"><code class="language-none">day(date)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="返回一个日期-时间值加上一个时间间隔expr后的时间值"><a href="#返回一个日期-时间值加上一个时间间隔expr后的时间值" class="headerlink" title="返回一个日期/时间值加上一个时间间隔expr后的时间值"></a>返回一个日期/时间值加上一个时间间隔expr后的时间值</h2><pre class="line-numbers language-none"><code class="language-none">date_add(date,INTERVAL expr type)select date_add(now(),INTERVAL 70 DAY);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="返回起始时间date1和结束时间date2之间的天数"><a href="#返回起始时间date1和结束时间date2之间的天数" class="headerlink" title="返回起始时间date1和结束时间date2之间的天数"></a>返回起始时间date1和结束时间date2之间的天数</h2><pre class="line-numbers language-none"><code class="language-none">datediff(date1,date2)select datediff('2021-10-01','2021-12-01');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h2><pre class="line-numbers language-none"><code class="language-none">查询所有员工入职天数,再根据入职天数倒序排序select name, datediff(curdate(),entrydate) as 'entrydays' from tb_user order by entrydays desc;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h1><h2 id="如果value为true，则返回f"><a href="#如果value为true，则返回f" class="headerlink" title="如果value为true，则返回f"></a>如果value为true，则返回f</h2><pre class="line-numbers language-none"><code class="language-none">if(value,t,f)select if(false,'ok','error')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="如果value1不为空，则返回value1-否则返回value2"><a href="#如果value1不为空，则返回value1-否则返回value2" class="headerlink" title="如果value1不为空，则返回value1,否则返回value2"></a>如果value1不为空，则返回value1,否则返回value2</h2><pre class="line-numbers language-none"><code class="language-none">ifnull(value1,value2)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="如果val1为true，返回res1-…否则返回default默认值"><a href="#如果val1为true，返回res1-…否则返回default默认值" class="headerlink" title="如果val1为true，返回res1,…否则返回default默认值"></a>如果val1为true，返回res1,…否则返回default默认值</h2><pre class="line-numbers language-none"><code class="language-none">case when [val1] then [res1] ... else[defalut] end<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="如果expr的值等于val1-返回res1-…否则返回default默认值"><a href="#如果expr的值等于val1-返回res1-…否则返回default默认值" class="headerlink" title="如果expr的值等于val1,返回res1,…否则返回default默认值"></a>如果expr的值等于val1,返回res1,…否则返回default默认值</h2><pre class="line-numbers language-none"><code class="language-none">case [expr] when [val1] then [res1]... else[default] end<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h2><pre class="line-numbers language-none"><code class="language-none">1.查询tb_user表的员工姓名和工作地址(北京和上海改为一线城市，其他改为二线)select  name,  (case workaddress when '北京' then '一线城市' when '上海' then '一线城市' else '二线城市' end) as '工作地址'  from tb_user;2.统计班级各个学员的成绩，展示的规则如下：&gt;=85,展示优秀&gt;=60,展示及格否则不及格select  id,  name,  (case when math&gt;=85 then '优秀' when math&gt;=60 then '及格' else '不及格' end)'数学',  (case when english&gt;=85 then '优秀' when english&gt;=60 then '及格' else '不及格' end)'英语',  (case when chiness&gt;=85 then '优秀' when chiness&gt;=60 then '及格' else '不及格' end)'语文'   from tb_user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;字符串函数&quot;&gt;&lt;a href=&quot;#字符串函数&quot; class=&quot;headerlink&quot; title=&quot;字符串函数&quot;&gt;&lt;/a&gt;字符串函数&lt;/h1&gt;&lt;h2 id=&quot;使用函数&quot;&gt;&lt;a href=&quot;#使用函数&quot; class=&quot;headerlink&quot; title=&quot;使用函数&quot;</summary>
      
    
    
    
    <category term="学习" scheme="https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="MYSQL" scheme="https://www.guanshunxin.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="https://www.guanshunxin.com/posts/8.html"/>
    <id>https://www.guanshunxin.com/posts/8.html</id>
    <published>2022-01-25T04:28:32.000Z</published>
    <updated>2022-01-26T08:20:42.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="Ajax特点"><a href="#Ajax特点" class="headerlink" title="Ajax特点"></a>Ajax特点</h2><h2 id="Ajax优点"><a href="#Ajax优点" class="headerlink" title="Ajax优点"></a>Ajax优点</h2><h3 id="可以无需刷新页面与服务器进行通信"><a href="#可以无需刷新页面与服务器进行通信" class="headerlink" title="可以无需刷新页面与服务器进行通信"></a>可以无需刷新页面与服务器进行通信</h3><h3 id="允许你根据用户事件来更新部分页面内容"><a href="#允许你根据用户事件来更新部分页面内容" class="headerlink" title="允许你根据用户事件来更新部分页面内容"></a>允许你根据用户事件来更新部分页面内容</h3><h2 id="Ajax缺点"><a href="#Ajax缺点" class="headerlink" title="Ajax缺点"></a>Ajax缺点</h2><h3 id="没有浏览历史，不能回退"><a href="#没有浏览历史，不能回退" class="headerlink" title="没有浏览历史，不能回退"></a>没有浏览历史，不能回退</h3><h3 id="存在跨域问题"><a href="#存在跨域问题" class="headerlink" title="存在跨域问题"></a>存在跨域问题</h3><h3 id="SEO不友好"><a href="#SEO不友好" class="headerlink" title="SEO不友好"></a>SEO不友好</h3><h2 id="Ajax-get请求"><a href="#Ajax-get请求" class="headerlink" title="Ajax get请求"></a>Ajax get请求</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;  &lt;title&gt;Ajax get 请求&lt;/title&gt;  &lt;style type="text/css"&gt;    #result{      width: 200px;      height: 100px;      border: solid 1px #90b;    }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;button&gt;点击发送请求&lt;/button&gt;  &lt;div id="result"&gt;&lt;/div&gt;  &lt;script type="text/javascript"&gt;    const btn=document.getElementsByTagName('button')[0];    const result=document.getElementById("result");    btn.onclick=function()    {      //console.log("test");      //1.创建对象      const xhr=new XMLHttpRequest();      //2.初始化 设置请求方法和url      xhr.open('GET','http://127.0.0.1:8000/server?a=100&amp;b=20&amp;c=40');      //3.发送      xhr.send();      //4.事件绑定 处理服务端返回的结果      //on when 当....时候      //readysatate 是xhr对象中的属性，表示状态0 1 2 3 4      //change 改变时      xhr.onreadystatechange=function()      {        //判断（服务端返回了所有结果）        if(xhr.readyState===4)        {          //判断响应状态码 200 404 403 401 500          //2xx 都为成功          if(xhr.status&gt;=200 &amp;&amp; xhr.status&lt;300)          {            //处理结果 行 头 空行 体            //1.响应行            // console.log(xhr.status);//状态码            // console.log(xhr.statusText);//状态字符串            // console.log(xhr.getAllResponseHeaders());//所有相应头            // console.log(xhr.response);//响应体            //设置result文本            result.innerHTML=xhr.response;          }        }      }    }  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Ajax-post请求"><a href="#Ajax-post请求" class="headerlink" title="Ajax post请求"></a>Ajax post请求</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;  &lt;title&gt;Ajax get 请求&lt;/title&gt;  &lt;style type="text/css"&gt;    #result{      width: 200px;      height: 100px;      border: solid 1px #903;    }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id="result"&gt;&lt;/div&gt;  &lt;script type="text/javascript"&gt;    const result=document.getElementById("result");    result.addEventListener("mouseover",function(){      // console.log("test");      //1.创建对象      const xhr=new XMLHttpRequest();      //2.初始化 设置请求方法和url      xhr.open('POST','http://127.0.0.1:8000/server');      //设置请求头      xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded');      //自定义请求头      xhr.setRequestHeader('name',"gsx");      //3.发送      xhr.send('a=100&amp;b=200&amp;c=300');      //4.事件绑定 处理服务端返回的结果      //on when 当....时候      //readysatate 是xhr对象中的属性，表示状态0 1 2 3 4      //change 改变时      xhr.onreadystatechange=function()      {        if(xhr.readyState===4)        {                    if(xhr.status&gt;=200 &amp;&amp; xhr.status&lt;300)          {                        result.innerHTML=xhr.response;          }        }      }    })  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Ajax-响应json数据"><a href="#Ajax-响应json数据" class="headerlink" title="Ajax 响应json数据"></a>Ajax 响应json数据</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;  &lt;title&gt;Ajax get 请求&lt;/title&gt;  &lt;style type="text/css"&gt;    #result{      width: 200px;      height: 100px;      border: solid 1px #903;    }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id="result"&gt;&lt;/div&gt;  &lt;script type="text/javascript"&gt;    const xhr=document.getElementById('result');    window.onkeydown=function()    {      // console.log("test");      //1.创建对象      const xhr=new XMLHttpRequest();      //设置响应体数据的类型      xhr.responseType='json';      //2.初始化 设置请求方法和url      xhr.open('POST','http://127.0.0.1:8000/json-server');      // //设置请求头      // xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded');      // //自定义请求头      // xhr.setRequestHeader('name',"gsx");      //3.发送      xhr.send();      //4.事件绑定 处理服务端返回的结果      //on when 当....时候      //readysatate 是xhr对象中的属性，表示状态0 1 2 3 4      //change 改变时      xhr.onreadystatechange=function()      {        if(xhr.readyState===4)        {                    if(xhr.status&gt;=200 &amp;&amp; xhr.status&lt;300)          {            // console.log(xhr.response);            // result.innerHTML=xhr.response;            //手动对数据转化            // let data=JSON.parse(xhr.response);            // console.log(data);            // result.innerHTML=data.name;                        //自动转换            console.log(xhr.response);            result.innerHTML=xhr.response.name;          }        }      }    }  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="IE缓存问题"><a href="#IE缓存问题" class="headerlink" title="IE缓存问题"></a>IE缓存问题</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;  &lt;title&gt;IE缓存问题&lt;/title&gt;  &lt;style type="text/css"&gt;    #result{      width: 200px;      height: 100px;      border: solid 1px #90b;    }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;button&gt;点击发送请求&lt;/button&gt;  &lt;div id="result"&gt;&lt;/div&gt;  &lt;script type="text/javascript"&gt;    const btn=document.getElementsByTagName('button')[0];    const result=document.getElementById("result");    btn.addEventListener('click',function(){      const xhr=new XMLHttpRequest();      //主要加上Date.now();      xhr.open("GET",'http://127.0.0.1:8000/ie?t='+Date.now());      xhr.send();      xhr.onreadystatechange=function(){        if(xhr.readyState===4)        {          if(xhr.status&gt;=200 &amp;&amp; xhr.status&lt;300)          {            result.innerHTML=xhr.response;          }        }      }    })  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="请求异常与网络超时"><a href="#请求异常与网络超时" class="headerlink" title="请求异常与网络超时"></a>请求异常与网络超时</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;  &lt;title&gt;请求异常与网络超时&lt;/title&gt;  &lt;style type="text/css"&gt;    #result{      width: 200px;      height: 100px;      border: solid 1px #90b;    }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;button&gt;点击发送请求&lt;/button&gt;  &lt;div id="result"&gt;&lt;/div&gt;  &lt;script type="text/javascript"&gt;    const btn=document.getElementsByTagName('button')[0];    const result=document.getElementById("result");    btn.addEventListener('click',function(){      const xhr=new XMLHttpRequest();      //超时设置2s设置      xhr.timeout=2000;      //超时回调      xhr.ontimeout=function()      {        alert("网络异常，请稍后重试！！");      }      //网络异常回调      xhr.onerror=function()      {        alert("网络似乎出现了一些问题！");      }      xhr.open("GET",'http://127.0.0.1:8000/delay');      xhr.send();      xhr.onreadystatechange=function(){        if(xhr.readyState===4)        {          if(xhr.status&gt;=200 &amp;&amp; xhr.status&lt;300)          {            result.innerHTML=xhr.response;          }        }      }    })  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;  &lt;title&gt;取消请求&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;button&gt;点击发送&lt;/button&gt;  &lt;button&gt;点击取消&lt;/button&gt;  &lt;script type="text/javascript"&gt;    const btns=document.querySelectorAll('button');    let x=null;    btns[0].onclick=function()    {      x=new XMLHttpRequest();      x.open('GET','http://127.0.0.1:8000/delay');      x.send();    }    //abort    btns[1].onclick=function()    {      x.abort();    }  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重复请求"><a href="#重复请求" class="headerlink" title="重复请求"></a>重复请求</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;  &lt;title&gt;重复请求&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;button&gt;点击发送&lt;/button&gt;  &lt;script type="text/javascript"&gt;    const btns=document.querySelectorAll('button');    let x=null;    //标识变量    let isSending=false;    btns[0].onclick=function()    {      //判断标识变量      if(isSending)      {        //如果正在发送，则取消该请求，创建一个新的请求        x.abort();      }      x=new XMLHttpRequest();      //修改标识变量的值      isSending=true;      x.open('GET','http://127.0.0.1:8000/delay');      x.send();      x.onreadystatechange=function()      {        if(x.readyState===4)        {          //修改标识变量          isSending=false;        }      }    }    //abort    btns[1].onclick=function()    {      x.abort();    }  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jQuery-发送AJAX请求"><a href="#jQuery-发送AJAX请求" class="headerlink" title="jQuery 发送AJAX请求"></a>jQuery 发送AJAX请求</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;  &lt;title&gt;jQuery 发送 AJAX 请求&lt;/title&gt;  &lt;link href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css" rel="stylesheet"&gt;  &lt;/head&gt;&lt;body&gt;  &lt;div class="container"&gt;    &lt;h2 class="page-header"&gt;jQuery发送AJAX请求 &lt;/h2&gt;    &lt;button class="btn btn-primary"&gt;GET&lt;/button&gt;    &lt;button class="btn btn-danger"&gt;POST&lt;/button&gt;    &lt;button class="bnt btn-info"&gt;通用型方法ajax&lt;/button&gt;  &lt;/div&gt;  &lt;script src="https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js"&gt;&lt;/script&gt;  &lt;script type="text/javascript"&gt;    $('button').eq(0).click(function(){      $.get('http://127.0.0.1:8000/jquery-server',{a:100,b:200},function(data){        console.log(data);      },'json')    });    $('button').eq(1).click(function(){      $.get('http://127.0.0.1:8000/jquery-server',{a:100,b:200},function(data){        console.log(data);      },'json')    });    $('button').eq(2).click(function(){      $.ajax({        //url        url:'http://127.0.0.1:8000/jquery-server',        //参数        data:{a:100,b:200},        //请求类型        type:'GET',        //响应体结果        dataType:'json',        //成功的回调        success:function(data)        {          console.log(data);        },        //超时时间        timeout:2000,        //失败的回调        error:function()        {          console.log("出错了!!");        },        //头信息        headers:{          c:200,          d:300        }      });    });  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;  &lt;title&gt;axios&lt;/title&gt;  &lt;script crossorigin="anonymous" src="https://cdn.bootcdn.net/ajax/libs/axios/0.24.0/axios.min.js"&gt;&lt;/script&gt;  &lt;link href="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body&gt;  &lt;button class="btn btn-primary"&gt;GET&lt;/button&gt;  &lt;button class="btn btn-danger"&gt;POST&lt;/button&gt;  &lt;button class="btn btn-primary"&gt;AJAX&lt;/button&gt;  &lt;script type="text/javascript"&gt;    const btns=document.querySelectorAll('button');    //配置 baseURL    axios.defaults.baseURL = 'http://127.0.0.1:8000';    btns[0].onclick=function()    {      //GET请求      axios.get('/axios-server',{        //url参数        params:{          id:100,          vip:7        },        //请求头信息        headers:{          name:'gdy',          age:20        }      }).then(value=&gt;{        console.log(value);      });    }    btns[1].onclick=function() {      axios.post('/axios-server',{          username:'admin',          password:'123456'        },{        //url        params:{          id:200,          vip:100        },        //请求头        headers:{          height:100,          weight:120,        }              });    }    btns[2].onclick=function() {      axios({        //请求方法        method:'POST',        //url        url:'/axios-server',        //url参数        params:{          vip:10,          level:30        },        //头信息        headers:{          a:100,          b:200        },        //请求体参数        data:{          username:'admin',          password:'123'        }      }).then(response=&gt;{        console.log(response);        //响应状态码        console.log(response.status);        //响应状态字符串        console.log(response.statusText);        //响应头信息        console.log(response.headers);        //响应体        console.log(response.data);      })    }  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fetch-发送AJAX请求"><a href="#fetch-发送AJAX请求" class="headerlink" title="fetch 发送AJAX请求"></a>fetch 发送AJAX请求</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;  &lt;title&gt;fetch 发送 AJAX请求&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;button&gt;AJAX请求&lt;/button&gt;  &lt;script type="text/javascript"&gt;    const btn=document.querySelector('button');    btn.onclick=function()    {      fetch('http://127.0.0.1:8000/fetch-server',{        //请求方法        method:'POST',        //请求头        headers:{          name:'gdy'        },      //请求体        body:'username=admin&amp;password=admin'      }).then(response=&gt;{        // return response.text();        return response.json();      }).then(response=&gt;{        console.log(response);      });    }  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jsonp原理"><a href="#jsonp原理" class="headerlink" title="jsonp原理"></a>jsonp原理</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;  &lt;title&gt;jsonp原理&lt;/title&gt;  &lt;style type="text/css"&gt;    #result{      width: 300px;      height: 100px;      border: solid 1px #78a;    }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;div id="result"&gt;&lt;/div&gt;  &lt;script type="text/javascript"&gt;    function handle(data) {      const result=document.getElementById('result');    result.innerHTML=data.name;    }      &lt;/script&gt;  &lt;script src="http://127.0.0.1:8000/jsonp-server"&gt;      &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jsonp案例"><a href="#jsonp案例" class="headerlink" title="jsonp案例"></a>jsonp案例</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;  &lt;title&gt;jsonp案例&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  用户名：&lt;input type="text" id="username"&gt;  &lt;p&gt;&lt;/p&gt;  &lt;script type="text/javascript"&gt;    //获取input元素    const input=document.querySelector('input');    const p=document.querySelector('p');    function handle(data) {      input.style.border="solid 1px #f00";      p.innerHTML=data.msg;    }    input.onblur=function()    {      //获取用户输入值      let username=this.value;      //向服务端发送请求，检测用户名是否存在      //1.创建script标签      const script=document.createElement('script');      //2.设置标签的src属性      script.src='http://127.0.0.1:8000/check-username';      //3.将script插入文档中      document.body.appendChild(script);    }  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;meta charset="UTF-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;  &lt;title&gt;CORS&lt;/title&gt;  &lt;style type="text/css"&gt;    #result{      width: 300px;      height: 100px;      border: solid 1px #78a;    }  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;button&gt;发送请求&lt;/button&gt;  &lt;div id="result"&gt;&lt;/div&gt;  &lt;script type="text/javascript"&gt;    const btn=document.querySelector('button');    const result=document.getElementById('result');    btn.onclick=function()    {      //1.创建对象      const x=new XMLHttpRequest();      //2.初始化设置      x.open('GET',"http:127.0.0.1:8000/cors-server");      //3.发送      x.send();      //4.绑定事件      x.onreadystatechange=function()      {        if(x.readyState===4)        {          if(x.status&gt;=200&amp;&amp;x.status&lt;300)          {            //输出响应体            // console.log(x.response);            result.innerHTML=x.response;          }        }      }    }  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><pre class="line-numbers language-none"><code class="language-none">//1.引入expressconst express=require('express');//2.创建应用对象const app=express();//3.创建路由规则//request是请求的报文//response是响应的报文app.get('/server',(request,response)=&gt;{  //设置响应头  response.setHeader('Access-Control-Allow-Origin','*');  //设置响应体  response.send('Hello Ajax');});//ie缓存问题app.get('/ie',(request,response)=&gt;{  //设置响应头  response.setHeader('Access-Control-Allow-Origin','*');  //设置响应体  response.send('Hello IE a');});//延迟app.all('/delay',(request,response)=&gt;{  //设置响应头  response.setHeader('Access-Control-Allow-Origin','*');  setTimeout(()=&gt;{    //设置响应体  response.send('延时响应');},3000)  });//jquery发送ajax请求app.all('/jquery-server',(request,response)=&gt;{  //设置响应头  response.setHeader('Access-Control-Allow-Origin','*');  response.setHeader('Access-Control-Allow-Headers','*');    //设置响应体    const data = {name: 'gdy'};  // response.send('hello jquery ajax');    response.send(JSON.stringify(data));  });//axios服务app.all('/axios-server',(request,response)=&gt;{  //设置响应头  response.setHeader('Access-Control-Allow-Origin','*');  response.setHeader('Access-Control-Allow-Headers','*');    //设置响应体    const data = {name: 'gdy'};  // response.send('hello jquery ajax');    response.send(JSON.stringify(data));  });//fetch服务app.all('/fetch-server',(request,response)=&gt;{  //设置响应头  response.setHeader('Access-Control-Allow-Origin','*');  response.setHeader('Access-Control-Allow-Headers','*');    //设置响应体    const data = {name: 'gdy'};  // response.send('hello jquery ajax');    response.send(JSON.stringify(data));  });//jsonp服务app.all('/jsonp-server',(request,response)=&gt;{  //response.send('console.log("hello")');  const data={    name:"gdy"  };  //将数据转化为字符串  let str=JSON.stringify(data);  //返回结果  response.end(`handle(${str})`);});//检测用户名是否存在app.all('/check-username',(request,response)=&gt;{  //response.send('console.log("hello")');  const data={    exist:1,    msg:'用户名已经存在'  };  //将数据转化为字符串  let str=JSON.stringify(data);  //返回结果  response.end(`handle(${str})`);});//CORSapp.all('/cors-server',(request,response)=&gt;{  //设置响应头  response.setHeader('Access-Control-Allow-Origin','*');  response.send('hello CORS');});// app.post('/server',(request,response)=&gt;{app.all('/server',(request,response)=&gt;{  //设置响应头  response.setHeader('Access-Control-Allow-Origin','*');  //允许自定义响应头  response.setHeader('Access-Control-Allow-Headers','*');  //设置响应体  response.send('Hello Ajax POST');});//服务端响应json数据app.all('/json-server',(request,response)=&gt;{  //设置响应头  response.setHeader('Access-Control-Allow-Origin','*');  //允许自定义响应头  response.setHeader('Access-Control-Allow-Headers','*');  //设置响应体  // response.send('Hello Ajax JSON1');  //响应一个数据  const data={    name:'gsx521521'  };  //对对象进行字符串转换  let str=JSON.stringify(data);  //设置响应体  response.send(str);});//4.监听端口启动服务app.listen(8000,()=&gt;{  console.log("服务已经启动，8000 端口监听中....");});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h1&gt;&lt;h2 id=&quot;Ajax特点&quot;&gt;&lt;a href=&quot;#Ajax特点&quot; class=&quot;headerlink&quot; title=&quot;Ajax特</summary>
      
    
    
    
    <category term="学习" scheme="https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Ajax" scheme="https://www.guanshunxin.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Node</title>
    <link href="https://www.guanshunxin.com/posts/7.html"/>
    <id>https://www.guanshunxin.com/posts/7.html</id>
    <published>2022-01-24T13:46:32.000Z</published>
    <updated>2022-01-26T10:00:22.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="执行JS文件"><a href="#执行JS文件" class="headerlink" title="执行JS文件"></a>执行JS文件</h2><pre class="line-numbers language-none"><code class="language-none">node JS文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Node中JS文件引入JS要使用require"><a href="#Node中JS文件引入JS要使用require" class="headerlink" title="Node中JS文件引入JS要使用require"></a>Node中JS文件引入JS要使用require</h2><pre class="line-numbers language-none"><code class="language-none">一个JS文件就是一个模块require("./module.js");npm等核心模块可以直接写名字require("express");创建一个对象var md= require("./module.js");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="每个JS文件中的代码都是独立运行在一个函数中的，而不是全局作用域"><a href="#每个JS文件中的代码都是独立运行在一个函数中的，而不是全局作用域" class="headerlink" title="每个JS文件中的代码都是独立运行在一个函数中的，而不是全局作用域"></a>每个JS文件中的代码都是独立运行在一个函数中的，而不是全局作用域</h3><h3 id="所以一个模块的变量和函数在其他模块中无法访问"><a href="#所以一个模块的变量和函数在其他模块中无法访问" class="headerlink" title="所以一个模块的变量和函数在其他模块中无法访问"></a>所以一个模块的变量和函数在其他模块中无法访问</h3><h2 id="向外部暴露变量和方法"><a href="#向外部暴露变量和方法" class="headerlink" title="向外部暴露变量和方法"></a>向外部暴露变量和方法</h2><pre class="line-numbers language-none"><code class="language-none">exports.x="我是module.js中的x"exports.fn=function(){};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="当node执行代码时，他会在代码的最外围添加如下代码"><a href="#当node执行代码时，他会在代码的最外围添加如下代码" class="headerlink" title="当node执行代码时，他会在代码的最外围添加如下代码"></a>当node执行代码时，他会在代码的最外围添加如下代码</h2><pre class="line-numbers language-none"><code class="language-none">function(exports,require,module,_filename,_dirname){}exports - 该对象用来将变量或函数暴露到外部require - 函数，用来引入外部模块module - module代表的是当前模块本身       - exports就是module的属性       - 既可以使用exports导出，也可以使用module.exports导出_filename - 当前模块完整路径_dirname - 当前模块所在文件夹的路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h2><pre class="line-numbers language-none"><code class="language-none">简略代码,不用一行一行的写exportsmodule.exports={  name:"猪八戒",  age:18  say:function(){    console.log("gsx");  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="npm-命令"><a href="#npm-命令" class="headerlink" title="npm 命令"></a>npm 命令</h2><pre class="line-numbers language-none"><code class="language-none">npm -v 查看版本npm 帮助说明npm search 包名 搜索包npm install 包名 在当前目录安装包npm install 包名 -g 在全局模式安装包npm init 初始化包(生产json文件)npm remove 包名 删除包npm install 包名 --save 安装包并生成依赖npm install 下载当前项目所依赖包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer(缓冲区)"></a>Buffer(缓冲区)</h2><pre class="line-numbers language-none"><code class="language-none">Buffer的结构和数组很像，操作的方法和数组类似数组不能储存二进制文件，而buffer就是专门用来储存二进制数据使用buffer不需要引入模块，直接使用在buffer中储存的都是二进制数据，但都以16进制形式显示var str="hello";var buf = buffer.from(str);console.log(buf);&lt;Buffer 48 65 6c 6c 6f&gt;创建一个10个字节的buffervar buf=Buffer.alloc(10);通过索引，来操作buf中的元素buf[0]=88;十进制方式赋值buf[1]=0xaa;十六进制赋值buf.toString 将缓冲区的数据转换成字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件系统fs"><a href="#文件系统fs" class="headerlink" title="文件系统fs"></a>文件系统fs</h2><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><pre class="line-numbers language-none"><code class="language-none">fs.openSync(path,flags[,mode])-path 要打开的文件路径-flags 打开文件要做操作的类型 r 只读 w 可写-mode 设置文件的操作权限，一般不传<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="向文件写入内容"><a href="#向文件写入内容" class="headerlink" title="向文件写入内容"></a>向文件写入内容</h3><pre class="line-numbers language-none"><code class="language-none">fs.writeSync(fd,string[,position[,encoding]])position 写入的起始位置var fs=require("fs");var fd=fs.openSunc("hello.txt","w");fs.writeSync(fd,"今天天气不错");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h3><pre class="line-numbers language-none"><code class="language-none">fs.closeSync(fd);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="异步文件写入"><a href="#异步文件写入" class="headerlink" title="异步文件写入"></a>异步文件写入</h3><pre class="line-numbers language-none"><code class="language-none">fs.open(path,flags[,mode],callback)异步调用的方法异步调用的方法，结果都是通过回调参数返回的回调参数 -err 错误对象，如果没有错误则为null -fd 文件的描述符fs.write(fd,string[,position[,encoding]],callback)fs.open("hello.tx","w",function(err,fd){  //判断是否出错  if(!err)  {    fs.write(fd,"这是异步写入的内容",function(err){      if(!err)      {        console.log("写入成功");      }      fs.close(fd,function(err)      {        if(!err)        {          console.log("文件已关闭");        }        })      }      })  }  else  {    console.log(err);  }  });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="简单文件写入"><a href="#简单文件写入" class="headerlink" title="简单文件写入"></a>简单文件写入</h3><pre class="line-numbers language-none"><code class="language-none">fs.writeFile(file,data[,options],callback)fs.writeFileSync(file,data[,options])-file 要写入的文件路径-data 要写入的数据-options 选项，可以写入进行一些设置-callback 当写入完成后执行的函数a 可以追加内容var fs=require("fs");fs.writeFile("hello.txt","这是通过writeFile写入的内容",{flag:"w"},function(err){  if(!err)  {    console.log("写入成功");  }  })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="流式文件写入"><a href="#流式文件写入" class="headerlink" title="流式文件写入"></a>流式文件写入</h3><pre class="line-numbers language-none"><code class="language-none">大文件的写入var fs=require("fs");创建一个可写流fs.createWriteStream(path[,options])-可以创建一个可写流-path 文件路径-option 配置的参数once(事件字符串，回调函数)可以为对象绑定一个一次性的事件，该事件会在触发一次后失效ws.once("open",function(){  console.log("流被打开了");  })ws.once("close",function(){  console.log("流被关闭了");  })var ws=fs.createWriteStream("hello.txt");ws.end();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><h3 id="简单文件读取"><a href="#简单文件读取" class="headerlink" title="简单文件读取"></a>简单文件读取</h3><pre class="line-numbers language-none"><code class="language-none">fs.readFile(path[,options],callback)fs.raedFileSync(path[,options])var fs=require("fs");fs.readFile("hello.txt",function(err,data){  if(!err)  {    //console.log(data.toString());    将data写入文件中    fs.writeFile("hello.txt",data,function(err){      if(!err)      {        console.log("文件写入成功");      }      })  }  })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="流式文件读取"><a href="#流式文件读取" class="headerlink" title="流式文件读取"></a>流式文件读取</h3><pre class="line-numbers language-none"><code class="language-none">var fs=require("fs");var rs=fs.createReadStream("a.jpg");rs.once("open",function(){  console.log("流被打开了");  })rs.once("close",function(){  console.log("流被关闭了");  })rs.on("data",function(data){  console.log(data);  })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pipe直接将可读流输出到可写流"><a href="#pipe直接将可读流输出到可写流" class="headerlink" title="pipe直接将可读流输出到可写流"></a>pipe直接将可读流输出到可写流</h3><pre class="line-numbers language-none"><code class="language-none">rs.pipe(ws);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="fs模块的其他方法"><a href="#fs模块的其他方法" class="headerlink" title="fs模块的其他方法"></a>fs模块的其他方法</h2><h3 id="检查一个文件是否存在"><a href="#检查一个文件是否存在" class="headerlink" title="检查一个文件是否存在"></a>检查一个文件是否存在</h3><pre class="line-numbers language-none"><code class="language-none">var fs=require("fs");var isExists=fs.existsSync("a.jpg");consloe.log(isExists);//false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h3><pre class="line-numbers language-none"><code class="language-none">fs.stat("a.mp3",function(err,stat){  console.log(stat);  });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><pre class="line-numbers language-none"><code class="language-none">fs.unlink(path,callback);fs.unlink("hello.txt")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="读取目录结构"><a href="#读取目录结构" class="headerlink" title="读取目录结构"></a>读取目录结构</h3><pre class="line-numbers language-none"><code class="language-none">fs.readdir(".",function(err,files){  if(!err)  {    console.log(files);  }  })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="截断文件"><a href="#截断文件" class="headerlink" title="截断文件"></a>截断文件</h3><pre class="line-numbers language-none"><code class="language-none">fs.truncateSync("hello.txt",10);将文件设为指定大小，上例设为10字节<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><pre class="line-numbers language-none"><code class="language-none">fs.mkdirSync("hello");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h3><pre class="line-numbers language-none"><code class="language-none">fs.rmdirSync("hello");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h3><pre class="line-numbers language-none"><code class="language-none">fs.renameSync("原名(路径)","新名(路径)",function(err){  if(!err)  {    console.log("修改成功");  }  });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="监视文件"><a href="#监视文件" class="headerlink" title="监视文件"></a>监视文件</h3><pre class="line-numbers language-none"><code class="language-none">fs.watchFile(filename[,options],listener)-filename 文件名-options 配置选项-listener 回调函数curr 当前文件大小prev 修改前文件大小fs.watchFile("hello.txt",{interval:1000},function(curr,prev){  console.log("文件发生变化");  console.log("修改前文件大小:"+prev.size);  console.log("修改后文件大小:"+curr.size);  })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;执行JS文件&quot;&gt;&lt;a href=&quot;#执行JS文件&quot; class=&quot;headerlink&quot; title=&quot;执行JS文件&quot;&gt;&lt;/a&gt;执行JS文件&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;lang</summary>
      
    
    
    
    <category term="学习" scheme="https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Node" scheme="https://www.guanshunxin.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL-DCL</title>
    <link href="https://www.guanshunxin.com/posts/6.html"/>
    <id>https://www.guanshunxin.com/posts/6.html</id>
    <published>2022-01-23T09:33:32.000Z</published>
    <updated>2022-01-26T10:00:57.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DCL-管理用户"><a href="#DCL-管理用户" class="headerlink" title="DCL-管理用户"></a>DCL-管理用户</h1><h2 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h2><pre class="line-numbers language-none"><code class="language-none">use mysql;select * from user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><pre class="line-numbers language-none"><code class="language-none">create user '用户名' @ '主机名' identified by '密码';创建用户itgsx ,只能在当前主机localhost访问，密码123456create user 'itgsx' @ 'localhost' identified by '123456';创建用户itgsx1 ，能在任意主机访问改数据库，密码123456create user 'itgsx' @ '%' identified by '123456';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h2><pre class="line-numbers language-none"><code class="language-none">alter user '用户名' @ '主机名' identified with mysql_native_password by '新密码';alter user 'itgsx1'@'%' identified with mysql_native_password by '1234';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><pre class="line-numbers language-none"><code class="language-none">drop user '用户名' @ '主机名';drop user 'itgsx' @'localhost';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="DCL-权限控制"><a href="#DCL-权限控制" class="headerlink" title="DCL-权限控制"></a>DCL-权限控制</h1><h2 id="查询权限"><a href="#查询权限" class="headerlink" title="查询权限"></a>查询权限</h2><pre class="line-numbers language-none"><code class="language-none">show grants for '用户名'@'主机名';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h2><pre class="line-numbers language-none"><code class="language-none">grant 权限列表 on 数据库名.表名 to '用户名'@'主机名';grant all on hxy.* to 'itgsx'@'%';把hxy数据库的所有权限授予itgsx用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="撤销权限"><a href="#撤销权限" class="headerlink" title="撤销权限"></a>撤销权限</h2><pre class="line-numbers language-none"><code class="language-none">revoke 权限列表 on 数据库名.表名 to '用户名'@'主机名';revoke all on hxy.* to 'itgsx'@'%';撤销itgsx用户在hxy数据库的所有权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DCL-管理用户&quot;&gt;&lt;a href=&quot;#DCL-管理用户&quot; class=&quot;headerlink&quot; title=&quot;DCL-管理用户&quot;&gt;&lt;/a&gt;DCL-管理用户&lt;/h1&gt;&lt;h2 id=&quot;查询用户&quot;&gt;&lt;a href=&quot;#查询用户&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="学习" scheme="https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="MYSQL" scheme="https://www.guanshunxin.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL-DQL</title>
    <link href="https://www.guanshunxin.com/posts/5.html"/>
    <id>https://www.guanshunxin.com/posts/5.html</id>
    <published>2022-01-23T09:13:32.000Z</published>
    <updated>2022-01-26T09:59:36.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DQL-数据查询"><a href="#DQL-数据查询" class="headerlink" title="DQL-数据查询"></a>DQL-数据查询</h1><h2 id="DQL-基础查询"><a href="#DQL-基础查询" class="headerlink" title="DQL-基础查询"></a>DQL-基础查询</h2><h3 id="1-查询多个字段"><a href="#1-查询多个字段" class="headerlink" title="1.查询多个字段"></a>1.查询多个字段</h3><pre class="line-numbers language-none"><code class="language-none">select 字段1,字段,字段3,... from 表名;select id from tb_user;select * from 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-设置别名"><a href="#2-设置别名" class="headerlink" title="2.设置别名"></a>2.设置别名</h3><pre class="line-numbers language-none"><code class="language-none">select 字段1[as 别名1],字段2[as 别名2]...from 表名;select id as '编号' from tb_user; as可以省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-去除重复记录"><a href="#3-去除重复记录" class="headerlink" title="3.去除重复记录"></a>3.去除重复记录</h3><pre class="line-numbers language-none"><code class="language-none">select distinct 字段列表 from 表名;select distinct id '编号' from tb_user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="DQL-条件查询"><a href="#DQL-条件查询" class="headerlink" title="DQL-条件查询"></a>DQL-条件查询</h2><pre class="line-numbers language-none"><code class="language-none">select 字段列表 from 表名 where 条件列表;select * from tb_user where age=20;select * from tb_user where age&gt;20;select * from tb_user where age&gt;=20 and age&lt;=50; 年龄大于20且小于50的select * from tb_user where age=20 or age=50; 年龄为20或50的select * from tb_user where age in(15,20,30); 年龄为15,20,30的select * from tb_user where age between 20 and 50; 年龄在20到50之间的select * from tb_user where id is null; id为空select * from tb_user where id is not null; id不为空select * from tb_user where name like '__'; 查询名字为两个字的名字select * from tb_user where idcard like '%X' 查询idcard最后一位为X的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DQL-聚合函数"><a href="#DQL-聚合函数" class="headerlink" title="DQL-聚合函数"></a>DQL-聚合函数</h2><pre class="line-numbers language-none"><code class="language-none">null 不会被统计select count(*) from tb_user; 数据总数量select count(id) from tb_user; id总数量select max(age) from tb_user; 年龄最大值select min(age) from tb_user; 年龄最小值select avg(age) from tb_user; 年龄平均值select sum(age) from tb_user where address='河南'; 求河南地区人的年龄的和<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DQL-分组查询"><a href="#DQL-分组查询" class="headerlink" title="DQL-分组查询"></a>DQL-分组查询</h2><pre class="line-numbers language-none"><code class="language-none">select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件]1、根据性别分组，统计男员工和女员工的数量select gender,count(*) from tb_user group by gender;2、根据性别分组，统计男员工和女员工的平均年龄select gender,avg(age) from tb_user group by gender;3、查询年龄小于45的员工，并根据工作地址分组，获取员工数量大于等于3的工作地址select workaddress count(*) from tb_user where age&lt;45 group by workaddress having count(*)&gt;=3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DQL-排序查询"><a href="#DQL-排序查询" class="headerlink" title="DQL-排序查询"></a>DQL-排序查询</h2><pre class="line-numbers language-none"><code class="language-none">select 字段列表 from 表名 order by 字段1 排序方式1,字段2 排序方式2;1、根据年龄对公司的员工进行升序(降序)排序select * from tb_user order by age asc; 升序asc 可以省略select * from tb_user order by age desc; 降序2、根据年龄进行升序排序，如果年龄相同，再按 id 降序排序select * from tb_user order by age asc, id desc;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DQL-分页查询"><a href="#DQL-分页查询" class="headerlink" title="DQL-分页查询"></a>DQL-分页查询</h2><pre class="line-numbers language-none"><code class="language-none">select 字段列表 from 表名 limit 起始索引,查询记录数;select * from tb_user limit 0,10;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><pre class="line-numbers language-none"><code class="language-none">查询性别为男，且年龄在20-40岁(含）之间的前五个员工信息，对查询的结果按年龄升序排序，年龄相同按id进行升序排序select * from tb_user where gender='男' and age between 20 and 40 order by age asc,id asc limit 5;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DQL-数据查询&quot;&gt;&lt;a href=&quot;#DQL-数据查询&quot; class=&quot;headerlink&quot; title=&quot;DQL-数据查询&quot;&gt;&lt;/a&gt;DQL-数据查询&lt;/h1&gt;&lt;h2 id=&quot;DQL-基础查询&quot;&gt;&lt;a href=&quot;#DQL-基础查询&quot; class=&quot;head</summary>
      
    
    
    
    <category term="学习" scheme="https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="MYSQL" scheme="https://www.guanshunxin.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL-DML</title>
    <link href="https://www.guanshunxin.com/posts/4.html"/>
    <id>https://www.guanshunxin.com/posts/4.html</id>
    <published>2022-01-22T06:55:32.000Z</published>
    <updated>2022-01-23T10:05:28.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL-DML-数据的增删改查"><a href="#SQL-DML-数据的增删改查" class="headerlink" title="SQL-DML 数据的增删改查"></a>SQL-DML 数据的增删改查</h1><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><h3 id="1-给指定字段添加数据"><a href="#1-给指定字段添加数据" class="headerlink" title="1.给指定字段添加数据"></a>1.给指定字段添加数据</h3><pre class="line-numbers language-none"><code class="language-none">insert into 表名(字段名1,字段名2,...) values(值1,值2,...);insert tb_user(id, name, age, gender, nickname) values (1,'gsx',20,'男','ggsx');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-给全部字段添加数据"><a href="#2-给全部字段添加数据" class="headerlink" title="2.给全部字段添加数据"></a>2.给全部字段添加数据</h3><pre class="line-numbers language-none"><code class="language-none">insert into 表名 values(值1,值2,...);insert tb_user values (2,'gs2x',20,'男','ggssx');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-批量添加数据"><a href="#3-批量添加数据" class="headerlink" title="3.批量添加数据"></a>3.批量添加数据</h3><pre class="line-numbers language-none"><code class="language-none">insert into 表名(字段名1,字段名2,...) values(值1,值2,...),(值1,值2,...),(值1,值2,...);insert tb_user(id, name, age, gender, nickname) values (1,'gsx',20,'男','ggsx'),(2,'gs3x',20,'男','gg3sx');insert into 表名 values(值1,值2,...),(值1,值2,...),(值1,值2,...);insert tb_user values (2,'gs2x',20,'男','ggssx'),(2,'gs3x',20,'男','gg3sx');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><pre class="line-numbers language-none"><code class="language-none">update 表名 set 字段名1=值1,字段名2=值2,...[where 条件];不加where 表示全部数据update tb_user set name='gdy' where id=1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><pre class="line-numbers language-none"><code class="language-none">delete from 表名 [where 条件];delete from tb_user where id=1; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SQL-DML-数据的增删改查&quot;&gt;&lt;a href=&quot;#SQL-DML-数据的增删改查&quot; class=&quot;headerlink&quot; title=&quot;SQL-DML 数据的增删改查&quot;&gt;&lt;/a&gt;SQL-DML 数据的增删改查&lt;/h1&gt;&lt;h2 id=&quot;添加数据&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="学习" scheme="https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="MYSQL" scheme="https://www.guanshunxin.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL-DDL</title>
    <link href="https://www.guanshunxin.com/posts/3.html"/>
    <id>https://www.guanshunxin.com/posts/3.html</id>
    <published>2022-01-22T06:54:32.000Z</published>
    <updated>2022-01-23T10:05:15.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DDL-数据库的操作"><a href="#DDL-数据库的操作" class="headerlink" title="DDL-数据库的操作"></a>DDL-数据库的操作</h1><h2 id="使用windows的命令提示符完成下列操作"><a href="#使用windows的命令提示符完成下列操作" class="headerlink" title="使用windows的命令提示符完成下列操作"></a>使用windows的命令提示符完成下列操作</h2><h3 id="MYSQL的启动"><a href="#MYSQL的启动" class="headerlink" title="MYSQL的启动"></a>MYSQL的启动</h3><pre class="line-numbers language-none"><code class="language-none">net start mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="MYSQL的停止"><a href="#MYSQL的停止" class="headerlink" title="MYSQL的停止"></a>MYSQL的停止</h3><pre class="line-numbers language-none"><code class="language-none">net stop mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="mysql客户端的连接"><a href="#mysql客户端的连接" class="headerlink" title="mysql客户端的连接"></a>mysql客户端的连接</h3><pre class="line-numbers language-none"><code class="language-none">mysql -uroot -p 然后输入密码进入<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://guanshunxin.github.io/img/mysql1.png" alt="Image text"></p><h3 id="查询所有数据库"><a href="#查询所有数据库" class="headerlink" title="查询所有数据库"></a>查询所有数据库</h3><pre class="line-numbers language-none"><code class="language-none">show databases;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查询当前数据库"><a href="#查询当前数据库" class="headerlink" title="查询当前数据库"></a>查询当前数据库</h3><pre class="line-numbers language-none"><code class="language-none">select database();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><pre class="line-numbers language-none"><code class="language-none">create database hxy;create database if not exists hxy; 即使数据库存在也不报错create database hxy default charset utf8mb4;设置指定字符集，推荐使用4个字节的；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><pre class="line-numbers language-none"><code class="language-none">drop database hxy;drop database if exists hxy; 如果存在就删除，不存在不会报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><pre class="line-numbers language-none"><code class="language-none">use hxy;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="DDL-表操作"><a href="#DDL-表操作" class="headerlink" title="DDL-表操作"></a>DDL-表操作</h1><h3 id="查看当前数据库所有的表"><a href="#查看当前数据库所有的表" class="headerlink" title="查看当前数据库所有的表"></a>查看当前数据库所有的表</h3><pre class="line-numbers language-none"><code class="language-none">show tables;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><pre class="line-numbers language-none"><code class="language-none">create table 字段名(  字段1 字段1类型[comment 字段1注释],  字段2 字段2类型[comment 字段2注释],  字段3 字段3类型[comment 字段3注释],  ......  字段n 字段n类型[comment 字段1注释]  )[comment 表注释];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://guanshunxin.github.io/img/mysql2.png" alt="Image text"></p><h3 id="查询表结构"><a href="#查询表结构" class="headerlink" title="查询表结构"></a>查询表结构</h3><pre class="line-numbers language-none"><code class="language-none">desc tb_user;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查询指定表的建表语句"><a href="#查询指定表的建表语句" class="headerlink" title="查询指定表的建表语句"></a>查询指定表的建表语句</h3><pre class="line-numbers language-none"><code class="language-none">show create table tb_user;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改表，添加字段"><a href="#修改表，添加字段" class="headerlink" title="修改表，添加字段"></a>修改表，添加字段</h3><pre class="line-numbers language-none"><code class="language-none">alter table 表名 add 字段名 类型(长度) [comment 注释] [约束];alter table tb_user add nickname varchar(20) comment '昵称';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="修改数据类型"><a href="#修改数据类型" class="headerlink" title="修改数据类型"></a>修改数据类型</h3><pre class="line-numbers language-none"><code class="language-none">alter table 表名 modify 字段名 新数据类型(长度);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改字段名和字段类型"><a href="#修改字段名和字段类型" class="headerlink" title="修改字段名和字段类型"></a>修改字段名和字段类型</h3><pre class="line-numbers language-none"><code class="language-none">alter table 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束];alter table tb_user change nickname nickname1 varchar(30) comment '用户名';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h3><pre class="line-numbers language-none"><code class="language-none">alter table 表名 drop 字段名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><pre class="line-numbers language-none"><code class="language-none">alter table 表名 rename to 新表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><pre class="line-numbers language-none"><code class="language-none">drop table [if exists] 表名;drop table if exists tb_user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="删除指定表，并重新创建该表"><a href="#删除指定表，并重新创建该表" class="headerlink" title="删除指定表，并重新创建该表"></a>删除指定表，并重新创建该表</h3><pre class="line-numbers language-none"><code class="language-none">truncate table 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DDL-数据库的操作&quot;&gt;&lt;a href=&quot;#DDL-数据库的操作&quot; class=&quot;headerlink&quot; title=&quot;DDL-数据库的操作&quot;&gt;&lt;/a&gt;DDL-数据库的操作&lt;/h1&gt;&lt;h2 id=&quot;使用windows的命令提示符完成下列操作&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="学习" scheme="https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="MYSQL" scheme="https://www.guanshunxin.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>Live2d看板娘位置的改变</title>
    <link href="https://www.guanshunxin.com/posts/2.html"/>
    <id>https://www.guanshunxin.com/posts/2.html</id>
    <published>2021-12-04T10:13:30.000Z</published>
    <updated>2021-12-05T12:31:13.949Z</updated>
    
    <content type="html"><![CDATA[<p>页面上的东西太多了，可爱的看版娘都没地方了，现在就让我们改变它的位置吧</p><h3 id="找到L2Dwidget-min-js"><a href="#找到L2Dwidget-min-js" class="headerlink" title="找到L2Dwidget.min.js"></a>找到L2Dwidget.min.js</h3><p>首先在自己的博客主目录下找到 node_modules ,打开 liv2d-widget 文件夹，编辑 L2Dwidget.min.js。</p><h3 id="修改其中的position"><a href="#修改其中的position" class="headerlink" title="修改其中的position"></a>修改其中的position</h3><p>Ctrl+f 找到position，修改 hOffset 改变的是水平的位置， hOffset 修改垂直位置 （ 根据自己的要求改变 ）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;页面上的东西太多了，可爱的看版娘都没地方了，现在就让我们改变它的位置吧&lt;/p&gt;
&lt;h3 id=&quot;找到L2Dwidget-min-js&quot;&gt;&lt;a href=&quot;#找到L2Dwidget-min-js&quot; class=&quot;headerlink&quot; title=&quot;找到L2Dwidget.m</summary>
      
    
    
    
    <category term="学习" scheme="https://www.guanshunxin.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Hexo" scheme="https://www.guanshunxin.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>博客与博主</title>
    <link href="https://www.guanshunxin.com/posts/1.html"/>
    <id>https://www.guanshunxin.com/posts/1.html</id>
    <published>2021-05-27T13:00:00.000Z</published>
    <updated>2021-12-04T09:53:29.782Z</updated>
    
    <content type="html"><![CDATA[<p>相遇皆是缘分</p><h3 id="为什么建博客？"><a href="#为什么建博客？" class="headerlink" title="为什么建博客？"></a>为什么建博客？</h3><p>肿么说了! 纯属个人兴趣，好玩，唉，就是玩!嘻嘻! 会有些成就感吧,拥有一个自己的博客写一些自己感兴趣的事或物,不是一件很酷的事嘛!</p><h3 id="展望博客"><a href="#展望博客" class="headerlink" title="展望博客"></a>展望博客</h3><p>我会整理一些个人所学的知识（学前端的，也会捣鼓捣鼓一些其它的专业的知识）或生活方面有兴趣的事发到博客上供大家观摩</p><h3 id="关于博主"><a href="#关于博主" class="headerlink" title="关于博主"></a>关于博主</h3><p>有位可爱的（小）朋友，给我取名叫 “仙气”，这是也是我博客上自居 “仙气” 的由来。喜欢自己所喜欢的，做自己想做的，追求自由与潇洒，多酷啊！ 想法是美好的，可现实… …   给大家推荐一首诗吧</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 《自由与爱情》---作者:裴多菲​ 生命诚可贵​ 爱情价更高​ 若为自由故​ 二者皆可抛<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>溜溜球啦！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;相遇皆是缘分&lt;/p&gt;
&lt;h3 id=&quot;为什么建博客？&quot;&gt;&lt;a href=&quot;#为什么建博客？&quot; class=&quot;headerlink&quot; title=&quot;为什么建博客？&quot;&gt;&lt;/a&gt;为什么建博客？&lt;/h3&gt;&lt;p&gt;肿么说了! 纯属个人兴趣，好玩，唉，就是玩!嘻嘻! 会有些成就感吧,拥有</summary>
      
    
    
    
    <category term="生活" scheme="https://www.guanshunxin.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="想法" scheme="https://www.guanshunxin.com/tags/%E6%83%B3%E6%B3%95/"/>
    
  </entry>
  
</feed>
